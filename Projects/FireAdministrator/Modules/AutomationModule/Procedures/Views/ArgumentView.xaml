<UserControl x:Class="AutomationModule.Views.ArgumentView"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:automation="clr-namespace:FiresecAPI.Automation;assembly=FiresecAPI"
			 xmlns:extToolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit/extended" >
	<UserControl.Resources>
		<ResourceDictionary Source="..\..\Steps\Views\ProcedureResources.xaml" />
	</UserControl.Resources>

	<StackPanel Orientation="Horizontal">
		<StackPanel.Resources>
			<CollectionViewSource Source="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.LocalVariables}" x:Key="localVariables" />
			<CollectionViewSource Source="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.GlobalVariables}" x:Key="globalVariables" />
		</StackPanel.Resources>
		<ComboBox ItemsSource="{Binding VariableScopes}" SelectedItem="{Binding SelectedVariableScope, UpdateSourceTrigger=PropertyChanged}">
			<ComboBox.ItemTemplate>
				<DataTemplate>
					<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
				</DataTemplate>
			</ComboBox.ItemTemplate>
		</ComboBox>

		<ComboBox Width="200" SelectedItem="{Binding SelectedVariable, UpdateSourceTrigger=PropertyChanged}"
				Visibility="{Binding Path=SelectedVariableScope, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:VariableScope.LocalVariable}}">
			<ComboBox.ItemsSource>
				<CompositeCollection>
					<CollectionContainer Collection="{Binding Source={StaticResource localVariables}}" />
					<ComboBoxItem Visibility="{Binding AddVariableVisibility, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=True}">
						<ComboBoxItem.Template>
							<ControlTemplate>
								<Button Content="Создать" Command="{Binding AddVariableCommand}" />
							</ControlTemplate>
						</ComboBoxItem.Template>
					</ComboBoxItem>
				</CompositeCollection>
			</ComboBox.ItemsSource>
			<ComboBox.ItemTemplate>
				<DataTemplate>
					<TextBlock Text="{Binding Variable.Name}" />
				</DataTemplate>
			</ComboBox.ItemTemplate>
		</ComboBox>

		<ComboBox Width="200" SelectedItem="{Binding SelectedVariable, UpdateSourceTrigger=PropertyChanged}"
				Visibility="{Binding Path=SelectedVariableScope, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:VariableScope.GlobalVariable}}">
			<ComboBox.ItemsSource>
				<CompositeCollection>
					<CollectionContainer Collection="{Binding Source={StaticResource globalVariables}}" />
					<ComboBoxItem Visibility="{Binding AddVariableVisibility, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=True}">
						<ComboBoxItem.Template>
							<ControlTemplate>
								<Button Content="Создать" Command="{Binding AddVariableCommand}" />
							</ControlTemplate>
						</ComboBoxItem.Template>
					</ComboBoxItem>
				</CompositeCollection>
			</ComboBox.ItemsSource>
			<ComboBox.ItemTemplate>
				<DataTemplate>
					<TextBlock Text="{Binding Variable.Name}" />
				</DataTemplate>
			</ComboBox.ItemTemplate>
		</ComboBox>

		<StackPanel Visibility="{Binding SelectedVariableScope, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:VariableScope.ExplicitValue}}">
			<StackPanel Visibility="{Binding IsList, Converter={StaticResource InversedBoolToVisibilityConverter}}">
				<extToolkit:IntegerUpDown Minimum="{Binding ExplicitValue.MinIntValue}" Maximum="{Binding ExplicitValue.MaxIntValue}" Value="{Binding ExplicitValue.IntValue, UpdateSourceTrigger=PropertyChanged}"
					Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.Integer}}" Width="200" />
				<CheckBox IsChecked="{Binding ExplicitValue.BoolValue, UpdateSourceTrigger=PropertyChanged}"
					Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.Boolean}}" Width="200" />
				<DockPanel Width="202" Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.String}}">
					<TextBox Width="182" Text="{Binding ExplicitValue.StringValue, UpdateSourceTrigger=PropertyChanged}" />
					<Button Command="{Binding EditStringCommand}" Width="20" Height="25" Content="..." Margin="-5,0,0,0" Foreground="White" FontSize="20">
						<Button.Style>
							<Style TargetType="Button">
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="Button">
											<Border Name="border" CornerRadius="0,3,3,0" Background="Orange" BorderThickness="0" >
												<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
											</Border>
											<ControlTemplate.Triggers>
												<Trigger Property="UIElement.IsMouseOver" Value="True">
													<Setter TargetName="border" Property="Border.Background" Value="{DynamicResource HighlightedBackgoundBrush}" />
													<Setter TargetName="border" Property="Border.BorderBrush" Value="{DynamicResource PressedBackgroundBrush}" />
												</Trigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>
						</Button.Style>
					</Button>
				</DockPanel>
				<extToolkit:DateTimePicker Value = "{Binding ExplicitValue.DateTimeValue, UpdateSourceTrigger=PropertyChanged}"
					Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.DateTime}}" Width="200" />
				<StackPanel Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.Enum}}">
					<ComboBox ItemsSource="{Binding ExplicitValue.StateTypeValues}" SelectedItem="{Binding ExplicitValue.StateTypeValue, UpdateSourceTrigger=PropertyChanged}"
					Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.StateType}}" Width="200">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<ComboBox ItemsSource="{Binding ExplicitValue.DriverTypeValues}" SelectedItem="{Binding ExplicitValue.DriverTypeValue, UpdateSourceTrigger=PropertyChanged}"
					Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.DriverType}}" Width="200">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<ComboBox ItemsSource="{Binding ExplicitValue.PermissionTypeValues}" SelectedItem="{Binding ExplicitValue.PermissionTypeValue, UpdateSourceTrigger=PropertyChanged}"
					Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.PermissionType}}" Width="200">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<ComboBox ItemsSource="{Binding ExplicitValue.JournalEventNameTypeValues}" SelectedItem="{Binding ExplicitValue.JournalEventNameTypeValue, UpdateSourceTrigger=PropertyChanged}"
					Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.JournalEventNameType}}" Width="200">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<ComboBox ItemsSource="{Binding ExplicitValue.JournalEventDescriptionTypeValues}" SelectedItem="{Binding ExplicitValue.JournalEventDescriptionTypeValue, UpdateSourceTrigger=PropertyChanged}"
					Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.JournalEventDescriptionType}}" Width="200">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<ComboBox ItemsSource="{Binding ExplicitValue.JournalObjectTypeValues}" SelectedItem="{Binding ExplicitValue.JournalObjectTypeValue, UpdateSourceTrigger=PropertyChanged}"
					Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.JournalObjectType}}" Width="200">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<ComboBox ItemsSource="{Binding ExplicitValue.ColorValues}" SelectedItem="{Binding ExplicitValue.ColorValue, UpdateSourceTrigger=PropertyChanged}"
					Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.ColorType}}" Width="200">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
				</StackPanel>
				<TextBlock Margin="7 7 0 0" VerticalAlignment="Top" Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.Object}}">
					<Hyperlink  Command="{Binding ChangeCommand}" Style="{StaticResource HyperlinkStyle}">
						<TextBlock Text="{Binding ExplicitValue.PresentationName}" Visibility="{Binding IsEmpty, Converter={StaticResource InversedBoolToVisibilityConverter}}" />
						<TextBlock Text="Нажмите для выбора объекта">
							<TextBlock.Style>
								<Style>
									<Setter Property="TextBlock.Visibility" Value="Collapsed" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding IsEmpty}" Value="True">
											<Setter Property="TextBlock.Visibility" Value="Visible" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>
					</Hyperlink>
				</TextBlock>
			</StackPanel>
			<TextBlock Margin="7 7 0 0" VerticalAlignment="Top" Visibility="{Binding IsList, Converter={StaticResource BoolToVisibilityConverter}}">
				<Hyperlink  Command="{Binding EditCommand}" Style="{StaticResource HyperlinkStyle}">
					<TextBlock Text="{Binding ValueDescription}" />
				</Hyperlink>
			</TextBlock>
		</StackPanel>
	</StackPanel>
</UserControl>