#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.296
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SKDDriver.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SKD")]
	public partial class SKDDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAccessTemplate(AccessTemplate instance);
    partial void UpdateAccessTemplate(AccessTemplate instance);
    partial void DeleteAccessTemplate(AccessTemplate instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertOrganisation(Organisation instance);
    partial void UpdateOrganisation(Organisation instance);
    partial void DeleteOrganisation(Organisation instance);
    partial void InsertOrganisationDoor(OrganisationDoor instance);
    partial void UpdateOrganisationDoor(OrganisationDoor instance);
    partial void DeleteOrganisationDoor(OrganisationDoor instance);
    partial void InsertOrganisationUser(OrganisationUser instance);
    partial void UpdateOrganisationUser(OrganisationUser instance);
    partial void DeleteOrganisationUser(OrganisationUser instance);
    partial void InsertHoliday(Holiday instance);
    partial void UpdateHoliday(Holiday instance);
    partial void DeleteHoliday(Holiday instance);
    partial void InsertAdditionalColumn(AdditionalColumn instance);
    partial void UpdateAdditionalColumn(AdditionalColumn instance);
    partial void DeleteAdditionalColumn(AdditionalColumn instance);
    partial void InsertAdditionalColumnType(AdditionalColumnType instance);
    partial void UpdateAdditionalColumnType(AdditionalColumnType instance);
    partial void DeleteAdditionalColumnType(AdditionalColumnType instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertScheduleScheme(ScheduleScheme instance);
    partial void UpdateScheduleScheme(ScheduleScheme instance);
    partial void DeleteScheduleScheme(ScheduleScheme instance);
    partial void InsertScheduleZone(ScheduleZone instance);
    partial void UpdateScheduleZone(ScheduleZone instance);
    partial void DeleteScheduleZone(ScheduleZone instance);
    partial void InsertInterval(Interval instance);
    partial void UpdateInterval(Interval instance);
    partial void DeleteInterval(Interval instance);
    partial void InsertNamedInterval(NamedInterval instance);
    partial void UpdateNamedInterval(NamedInterval instance);
    partial void DeleteNamedInterval(NamedInterval instance);
    partial void InsertDay(Day instance);
    partial void UpdateDay(Day instance);
    partial void DeleteDay(Day instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertGuardZone(GuardZone instance);
    partial void UpdateGuardZone(GuardZone instance);
    partial void DeleteGuardZone(GuardZone instance);
    partial void InsertPhone(Phone instance);
    partial void UpdatePhone(Phone instance);
    partial void DeletePhone(Phone instance);
    partial void InsertPhoto(Photo instance);
    partial void UpdatePhoto(Photo instance);
    partial void DeletePhoto(Photo instance);
    partial void InsertOrganisationZone(OrganisationZone instance);
    partial void UpdateOrganisationZone(OrganisationZone instance);
    partial void DeleteOrganisationZone(OrganisationZone instance);
    partial void InsertPendingCard(PendingCard instance);
    partial void UpdatePendingCard(PendingCard instance);
    partial void DeletePendingCard(PendingCard instance);
    partial void InsertOrganisationCardTemplate(OrganisationCardTemplate instance);
    partial void UpdateOrganisationCardTemplate(OrganisationCardTemplate instance);
    partial void DeleteOrganisationCardTemplate(OrganisationCardTemplate instance);
    partial void InsertCardDoor(CardDoor instance);
    partial void UpdateCardDoor(CardDoor instance);
    partial void DeleteCardDoor(CardDoor instance);
    partial void InsertJournal(Journal instance);
    partial void UpdateJournal(Journal instance);
    partial void DeleteJournal(Journal instance);
    partial void InsertPassJournal(PassJournal instance);
    partial void UpdatePassJournal(PassJournal instance);
    partial void DeletePassJournal(PassJournal instance);
    partial void InsertCard(Card instance);
    partial void UpdateCard(Card instance);
    partial void DeleteCard(Card instance);
    #endregion
		
		public SKDDataContext() : 
				base(global::SKDDriver.Properties.Settings.Default.ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SKDDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SKDDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SKDDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SKDDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccessTemplate> AccessTemplates
		{
			get
			{
				return this.GetTable<AccessTemplate>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<Organisation> Organisations
		{
			get
			{
				return this.GetTable<Organisation>();
			}
		}
		
		public System.Data.Linq.Table<OrganisationDoor> OrganisationDoors
		{
			get
			{
				return this.GetTable<OrganisationDoor>();
			}
		}
		
		public System.Data.Linq.Table<OrganisationUser> OrganisationUsers
		{
			get
			{
				return this.GetTable<OrganisationUser>();
			}
		}
		
		public System.Data.Linq.Table<Holiday> Holidays
		{
			get
			{
				return this.GetTable<Holiday>();
			}
		}
		
		public System.Data.Linq.Table<AdditionalColumn> AdditionalColumns
		{
			get
			{
				return this.GetTable<AdditionalColumn>();
			}
		}
		
		public System.Data.Linq.Table<AdditionalColumnType> AdditionalColumnTypes
		{
			get
			{
				return this.GetTable<AdditionalColumnType>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<ScheduleScheme> ScheduleSchemes
		{
			get
			{
				return this.GetTable<ScheduleScheme>();
			}
		}
		
		public System.Data.Linq.Table<ScheduleZone> ScheduleZones
		{
			get
			{
				return this.GetTable<ScheduleZone>();
			}
		}
		
		public System.Data.Linq.Table<Interval> Intervals
		{
			get
			{
				return this.GetTable<Interval>();
			}
		}
		
		public System.Data.Linq.Table<NamedInterval> NamedIntervals
		{
			get
			{
				return this.GetTable<NamedInterval>();
			}
		}
		
		public System.Data.Linq.Table<Day> Days
		{
			get
			{
				return this.GetTable<Day>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<GuardZone> GuardZones
		{
			get
			{
				return this.GetTable<GuardZone>();
			}
		}
		
		public System.Data.Linq.Table<Patch> Patches
		{
			get
			{
				return this.GetTable<Patch>();
			}
		}
		
		public System.Data.Linq.Table<Phone> Phones
		{
			get
			{
				return this.GetTable<Phone>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<OrganisationZone> OrganisationZones
		{
			get
			{
				return this.GetTable<OrganisationZone>();
			}
		}
		
		public System.Data.Linq.Table<PendingCard> PendingCards
		{
			get
			{
				return this.GetTable<PendingCard>();
			}
		}
		
		public System.Data.Linq.Table<OrganisationCardTemplate> OrganisationCardTemplates
		{
			get
			{
				return this.GetTable<OrganisationCardTemplate>();
			}
		}
		
		public System.Data.Linq.Table<CardDoor> CardDoors
		{
			get
			{
				return this.GetTable<CardDoor>();
			}
		}
		
		public System.Data.Linq.Table<Journal> Journals
		{
			get
			{
				return this.GetTable<Journal>();
			}
		}
		
		public System.Data.Linq.Table<PassJournal> PassJournals
		{
			get
			{
				return this.GetTable<PassJournal>();
			}
		}
		
		public System.Data.Linq.Table<Card> Cards
		{
			get
			{
				return this.GetTable<Card>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessTemplate")]
	public partial class AccessTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganisationUID;
		
		private EntitySet<GuardZone> _GuardZones;
		
		private EntitySet<CardDoor> _CardDoors;
		
		private EntitySet<Card> _Cards;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganisationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganisationUIDChanged();
    #endregion
		
		public AccessTemplate()
		{
			this._GuardZones = new EntitySet<GuardZone>(new Action<GuardZone>(this.attach_GuardZones), new Action<GuardZone>(this.detach_GuardZones));
			this._CardDoors = new EntitySet<CardDoor>(new Action<CardDoor>(this.attach_CardDoors), new Action<CardDoor>(this.detach_CardDoors));
			this._Cards = new EntitySet<Card>(new Action<Card>(this.attach_Cards), new Action<Card>(this.detach_Cards));
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessTemplate_GuardZone", Storage="_GuardZones", ThisKey="UID", OtherKey="ParentUID")]
		public EntitySet<GuardZone> GuardZones
		{
			get
			{
				return this._GuardZones;
			}
			set
			{
				this._GuardZones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessTemplate_CardDoor", Storage="_CardDoors", ThisKey="UID", OtherKey="ParentUID")]
		public EntitySet<CardDoor> CardDoors
		{
			get
			{
				return this._CardDoors;
			}
			set
			{
				this._CardDoors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessTemplate_Card", Storage="_Cards", ThisKey="UID", OtherKey="AccessTemplateUID")]
		public EntitySet<Card> Cards
		{
			get
			{
				return this._Cards;
			}
			set
			{
				this._Cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_AccessTemplate", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.AccessTemplates.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.AccessTemplates.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GuardZones(GuardZone entity)
		{
			this.SendPropertyChanging();
			entity.AccessTemplate = this;
		}
		
		private void detach_GuardZones(GuardZone entity)
		{
			this.SendPropertyChanging();
			entity.AccessTemplate = null;
		}
		
		private void attach_CardDoors(CardDoor entity)
		{
			this.SendPropertyChanging();
			entity.AccessTemplate = this;
		}
		
		private void detach_CardDoors(CardDoor entity)
		{
			this.SendPropertyChanging();
			entity.AccessTemplate = null;
		}
		
		private void attach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.AccessTemplate = this;
		}
		
		private void detach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.AccessTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _FirstName;
		
		private string _SecondName;
		
		private string _LastName;
		
		private System.Nullable<System.Guid> _PhotoUID;
		
		private System.Nullable<System.Guid> _PositionUID;
		
		private System.Nullable<System.Guid> _DepartmentUID;
		
		private System.Nullable<System.Guid> _ScheduleUID;
		
		private System.DateTime _ScheduleStartDate;
		
		private System.DateTime _Appointed;
		
		private System.DateTime _Dismissed;
		
		private System.Nullable<int> _Type;
		
		private int _TabelNo;
		
		private System.DateTime _CredentialsStartDate;
		
		private System.Nullable<System.Guid> _EscortUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganisationUID;
		
		private string _DocumentNumber;
		
		private System.DateTime _BirthDate;
		
		private string _BirthPlace;
		
		private System.DateTime _DocumentGivenDate;
		
		private string _DocumentGivenBy;
		
		private System.DateTime _DocumentValidTo;
		
		private int _Gender;
		
		private string _DocumentDepartmentCode;
		
		private string _Citizenship;
		
		private int _DocumentType;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<AdditionalColumn> _AdditionalColumns;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Department> _Departments1;
		
		private EntitySet<GuardZone> _GuardZones;
		
		private EntitySet<PassJournal> _PassJournals;
		
		private EntitySet<Card> _Cards;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<Position> _Position;
		
		private EntityRef<Organisation> _Organisation;
		
		private EntityRef<Schedule> _Schedule;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Photo> _Photo;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSecondNameChanging(string value);
    partial void OnSecondNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhotoUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhotoUIDChanged();
    partial void OnPositionUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPositionUIDChanged();
    partial void OnDepartmentUIDChanging(System.Nullable<System.Guid> value);
    partial void OnDepartmentUIDChanged();
    partial void OnScheduleUIDChanging(System.Nullable<System.Guid> value);
    partial void OnScheduleUIDChanged();
    partial void OnScheduleStartDateChanging(System.DateTime value);
    partial void OnScheduleStartDateChanged();
    partial void OnAppointedChanging(System.DateTime value);
    partial void OnAppointedChanged();
    partial void OnDismissedChanging(System.DateTime value);
    partial void OnDismissedChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnTabelNoChanging(int value);
    partial void OnTabelNoChanged();
    partial void OnCredentialsStartDateChanging(System.DateTime value);
    partial void OnCredentialsStartDateChanged();
    partial void OnEscortUIDChanging(System.Nullable<System.Guid> value);
    partial void OnEscortUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganisationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganisationUIDChanged();
    partial void OnDocumentNumberChanging(string value);
    partial void OnDocumentNumberChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnBirthPlaceChanging(string value);
    partial void OnBirthPlaceChanged();
    partial void OnDocumentGivenDateChanging(System.DateTime value);
    partial void OnDocumentGivenDateChanged();
    partial void OnDocumentGivenByChanging(string value);
    partial void OnDocumentGivenByChanged();
    partial void OnDocumentValidToChanging(System.DateTime value);
    partial void OnDocumentValidToChanged();
    partial void OnGenderChanging(int value);
    partial void OnGenderChanged();
    partial void OnDocumentDepartmentCodeChanging(string value);
    partial void OnDocumentDepartmentCodeChanged();
    partial void OnCitizenshipChanging(string value);
    partial void OnCitizenshipChanged();
    partial void OnDocumentTypeChanging(int value);
    partial void OnDocumentTypeChanged();
    #endregion
		
		public Employee()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._AdditionalColumns = new EntitySet<AdditionalColumn>(new Action<AdditionalColumn>(this.attach_AdditionalColumns), new Action<AdditionalColumn>(this.detach_AdditionalColumns));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Departments1 = new EntitySet<Department>(new Action<Department>(this.attach_Departments1), new Action<Department>(this.detach_Departments1));
			this._GuardZones = new EntitySet<GuardZone>(new Action<GuardZone>(this.attach_GuardZones), new Action<GuardZone>(this.detach_GuardZones));
			this._PassJournals = new EntitySet<PassJournal>(new Action<PassJournal>(this.attach_PassJournals), new Action<PassJournal>(this.detach_PassJournals));
			this._Cards = new EntitySet<Card>(new Action<Card>(this.attach_Cards), new Action<Card>(this.detach_Cards));
			this._Employee1 = default(EntityRef<Employee>);
			this._Position = default(EntityRef<Position>);
			this._Organisation = default(EntityRef<Organisation>);
			this._Schedule = default(EntityRef<Schedule>);
			this._Department = default(EntityRef<Department>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondName", DbType="NVarChar(50)")]
		public string SecondName
		{
			get
			{
				return this._SecondName;
			}
			set
			{
				if ((this._SecondName != value))
				{
					this.OnSecondNameChanging(value);
					this.SendPropertyChanging();
					this._SecondName = value;
					this.SendPropertyChanged("SecondName");
					this.OnSecondNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhotoUID
		{
			get
			{
				return this._PhotoUID;
			}
			set
			{
				if ((this._PhotoUID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoUIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoUID = value;
					this.SendPropertyChanged("PhotoUID");
					this.OnPhotoUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PositionUID
		{
			get
			{
				return this._PositionUID;
			}
			set
			{
				if ((this._PositionUID != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionUIDChanging(value);
					this.SendPropertyChanging();
					this._PositionUID = value;
					this.SendPropertyChanged("PositionUID");
					this.OnPositionUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DepartmentUID
		{
			get
			{
				return this._DepartmentUID;
			}
			set
			{
				if ((this._DepartmentUID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentUIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentUID = value;
					this.SendPropertyChanged("DepartmentUID");
					this.OnDepartmentUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ScheduleUID
		{
			get
			{
				return this._ScheduleUID;
			}
			set
			{
				if ((this._ScheduleUID != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleUIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleUID = value;
					this.SendPropertyChanged("ScheduleUID");
					this.OnScheduleUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleStartDate", DbType="DateTime NOT NULL")]
		public System.DateTime ScheduleStartDate
		{
			get
			{
				return this._ScheduleStartDate;
			}
			set
			{
				if ((this._ScheduleStartDate != value))
				{
					this.OnScheduleStartDateChanging(value);
					this.SendPropertyChanging();
					this._ScheduleStartDate = value;
					this.SendPropertyChanged("ScheduleStartDate");
					this.OnScheduleStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointed", DbType="DateTime NOT NULL")]
		public System.DateTime Appointed
		{
			get
			{
				return this._Appointed;
			}
			set
			{
				if ((this._Appointed != value))
				{
					this.OnAppointedChanging(value);
					this.SendPropertyChanging();
					this._Appointed = value;
					this.SendPropertyChanged("Appointed");
					this.OnAppointedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dismissed", DbType="DateTime NOT NULL")]
		public System.DateTime Dismissed
		{
			get
			{
				return this._Dismissed;
			}
			set
			{
				if ((this._Dismissed != value))
				{
					this.OnDismissedChanging(value);
					this.SendPropertyChanging();
					this._Dismissed = value;
					this.SendPropertyChanged("Dismissed");
					this.OnDismissedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TabelNo", DbType="Int NOT NULL")]
		public int TabelNo
		{
			get
			{
				return this._TabelNo;
			}
			set
			{
				if ((this._TabelNo != value))
				{
					this.OnTabelNoChanging(value);
					this.SendPropertyChanging();
					this._TabelNo = value;
					this.SendPropertyChanged("TabelNo");
					this.OnTabelNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CredentialsStartDate", DbType="DateTime NOT NULL")]
		public System.DateTime CredentialsStartDate
		{
			get
			{
				return this._CredentialsStartDate;
			}
			set
			{
				if ((this._CredentialsStartDate != value))
				{
					this.OnCredentialsStartDateChanging(value);
					this.SendPropertyChanging();
					this._CredentialsStartDate = value;
					this.SendPropertyChanged("CredentialsStartDate");
					this.OnCredentialsStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EscortUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EscortUID
		{
			get
			{
				return this._EscortUID;
			}
			set
			{
				if ((this._EscortUID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEscortUIDChanging(value);
					this.SendPropertyChanging();
					this._EscortUID = value;
					this.SendPropertyChanged("EscortUID");
					this.OnEscortUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentNumber", DbType="NVarChar(50)")]
		public string DocumentNumber
		{
			get
			{
				return this._DocumentNumber;
			}
			set
			{
				if ((this._DocumentNumber != value))
				{
					this.OnDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._DocumentNumber = value;
					this.SendPropertyChanged("DocumentNumber");
					this.OnDocumentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthPlace", DbType="NVarChar(MAX)")]
		public string BirthPlace
		{
			get
			{
				return this._BirthPlace;
			}
			set
			{
				if ((this._BirthPlace != value))
				{
					this.OnBirthPlaceChanging(value);
					this.SendPropertyChanging();
					this._BirthPlace = value;
					this.SendPropertyChanged("BirthPlace");
					this.OnBirthPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentGivenDate", DbType="DateTime NOT NULL")]
		public System.DateTime DocumentGivenDate
		{
			get
			{
				return this._DocumentGivenDate;
			}
			set
			{
				if ((this._DocumentGivenDate != value))
				{
					this.OnDocumentGivenDateChanging(value);
					this.SendPropertyChanging();
					this._DocumentGivenDate = value;
					this.SendPropertyChanged("DocumentGivenDate");
					this.OnDocumentGivenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentGivenBy", DbType="NVarChar(MAX)")]
		public string DocumentGivenBy
		{
			get
			{
				return this._DocumentGivenBy;
			}
			set
			{
				if ((this._DocumentGivenBy != value))
				{
					this.OnDocumentGivenByChanging(value);
					this.SendPropertyChanging();
					this._DocumentGivenBy = value;
					this.SendPropertyChanged("DocumentGivenBy");
					this.OnDocumentGivenByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentValidTo", DbType="DateTime NOT NULL")]
		public System.DateTime DocumentValidTo
		{
			get
			{
				return this._DocumentValidTo;
			}
			set
			{
				if ((this._DocumentValidTo != value))
				{
					this.OnDocumentValidToChanging(value);
					this.SendPropertyChanging();
					this._DocumentValidTo = value;
					this.SendPropertyChanged("DocumentValidTo");
					this.OnDocumentValidToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Int NOT NULL")]
		public int Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentDepartmentCode", DbType="NVarChar(50)")]
		public string DocumentDepartmentCode
		{
			get
			{
				return this._DocumentDepartmentCode;
			}
			set
			{
				if ((this._DocumentDepartmentCode != value))
				{
					this.OnDocumentDepartmentCodeChanging(value);
					this.SendPropertyChanging();
					this._DocumentDepartmentCode = value;
					this.SendPropertyChanged("DocumentDepartmentCode");
					this.OnDocumentDepartmentCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Citizenship", DbType="NVarChar(MAX)")]
		public string Citizenship
		{
			get
			{
				return this._Citizenship;
			}
			set
			{
				if ((this._Citizenship != value))
				{
					this.OnCitizenshipChanging(value);
					this.SendPropertyChanging();
					this._Citizenship = value;
					this.SendPropertyChanged("Citizenship");
					this.OnCitizenshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentType", DbType="Int NOT NULL")]
		public int DocumentType
		{
			get
			{
				return this._DocumentType;
			}
			set
			{
				if ((this._DocumentType != value))
				{
					this.OnDocumentTypeChanging(value);
					this.SendPropertyChanging();
					this._DocumentType = value;
					this.SendPropertyChanged("DocumentType");
					this.OnDocumentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Employee", Storage="_Employees", ThisKey="UID", OtherKey="EscortUID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AdditionalColumn", Storage="_AdditionalColumns", ThisKey="UID", OtherKey="EmployeeUID")]
		public EntitySet<AdditionalColumn> AdditionalColumns
		{
			get
			{
				return this._AdditionalColumns;
			}
			set
			{
				this._AdditionalColumns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Department", Storage="_Departments", ThisKey="UID", OtherKey="ContactEmployeeUID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Department1", Storage="_Departments1", ThisKey="UID", OtherKey="AttendantUID")]
		public EntitySet<Department> Departments1
		{
			get
			{
				return this._Departments1;
			}
			set
			{
				this._Departments1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_GuardZone", Storage="_GuardZones", ThisKey="UID", OtherKey="ParentUID")]
		public EntitySet<GuardZone> GuardZones
		{
			get
			{
				return this._GuardZones;
			}
			set
			{
				this._GuardZones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PassJournal", Storage="_PassJournals", ThisKey="UID", OtherKey="EmployeeUID")]
		public EntitySet<PassJournal> PassJournals
		{
			get
			{
				return this._PassJournals;
			}
			set
			{
				this._PassJournals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Card", Storage="_Cards", ThisKey="UID", OtherKey="EmployeeUID")]
		public EntitySet<Card> Cards
		{
			get
			{
				return this._Cards;
			}
			set
			{
				this._Cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Employee", Storage="_Employee1", ThisKey="EscortUID", OtherKey="UID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._EscortUID = value.UID;
					}
					else
					{
						this._EscortUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Employee", Storage="_Position", ThisKey="PositionUID", OtherKey="UID", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._PositionUID = value.UID;
					}
					else
					{
						this._PositionUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Employee", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Employee", Storage="_Schedule", ThisKey="ScheduleUID", OtherKey="UID", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._ScheduleUID = value.UID;
					}
					else
					{
						this._ScheduleUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Department", ThisKey="DepartmentUID", OtherKey="UID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DepartmentUID = value.UID;
					}
					else
					{
						this._DepartmentUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Employee", Storage="_Photo", ThisKey="PhotoUID", OtherKey="UID", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._PhotoUID = value.UID;
					}
					else
					{
						this._PhotoUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_AdditionalColumns(AdditionalColumn entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_AdditionalColumns(AdditionalColumn entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Departments1(Department entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Departments1(Department entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_GuardZones(GuardZone entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_GuardZones(GuardZone entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_PassJournals(PassJournal entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_PassJournals(PassJournal entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganisationUID;
		
		private System.Nullable<System.Guid> _PhotoUID;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<Organisation> _Organisation;
		
		private EntityRef<Photo> _Photo;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganisationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganisationUIDChanged();
    partial void OnPhotoUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhotoUIDChanged();
    #endregion
		
		public Position()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Organisation = default(EntityRef<Organisation>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhotoUID
		{
			get
			{
				return this._PhotoUID;
			}
			set
			{
				if ((this._PhotoUID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoUIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoUID = value;
					this.SendPropertyChanged("PhotoUID");
					this.OnPhotoUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Employee", Storage="_Employees", ThisKey="UID", OtherKey="PositionUID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Position", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Positions.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Positions.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Position", Storage="_Photo", ThisKey="PhotoUID", OtherKey="UID", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Positions.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Positions.Add(this);
						this._PhotoUID = value.UID;
					}
					else
					{
						this._PhotoUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organisation")]
	public partial class Organisation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _PhotoUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private EntitySet<AccessTemplate> _AccessTemplates;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Position> _Positions;
		
		private EntitySet<OrganisationDoor> _OrganisationDoors;
		
		private EntitySet<OrganisationUser> _OrganisationUsers;
		
		private EntitySet<Holiday> _Holidays;
		
		private EntitySet<AdditionalColumnType> _AdditionalColumnTypes;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntitySet<ScheduleScheme> _ScheduleSchemes;
		
		private EntitySet<NamedInterval> _NamedIntervals;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<GuardZone> _GuardZones;
		
		private EntitySet<Phone> _Phones;
		
		private EntitySet<OrganisationZone> _OrganisationZones;
		
		private EntitySet<OrganisationCardTemplate> _OrganisationCardTemplates;
		
		private EntityRef<Photo> _Photo;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPhotoUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhotoUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    #endregion
		
		public Organisation()
		{
			this._AccessTemplates = new EntitySet<AccessTemplate>(new Action<AccessTemplate>(this.attach_AccessTemplates), new Action<AccessTemplate>(this.detach_AccessTemplates));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Positions = new EntitySet<Position>(new Action<Position>(this.attach_Positions), new Action<Position>(this.detach_Positions));
			this._OrganisationDoors = new EntitySet<OrganisationDoor>(new Action<OrganisationDoor>(this.attach_OrganisationDoors), new Action<OrganisationDoor>(this.detach_OrganisationDoors));
			this._OrganisationUsers = new EntitySet<OrganisationUser>(new Action<OrganisationUser>(this.attach_OrganisationUsers), new Action<OrganisationUser>(this.detach_OrganisationUsers));
			this._Holidays = new EntitySet<Holiday>(new Action<Holiday>(this.attach_Holidays), new Action<Holiday>(this.detach_Holidays));
			this._AdditionalColumnTypes = new EntitySet<AdditionalColumnType>(new Action<AdditionalColumnType>(this.attach_AdditionalColumnTypes), new Action<AdditionalColumnType>(this.detach_AdditionalColumnTypes));
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._ScheduleSchemes = new EntitySet<ScheduleScheme>(new Action<ScheduleScheme>(this.attach_ScheduleSchemes), new Action<ScheduleScheme>(this.detach_ScheduleSchemes));
			this._NamedIntervals = new EntitySet<NamedInterval>(new Action<NamedInterval>(this.attach_NamedIntervals), new Action<NamedInterval>(this.detach_NamedIntervals));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._GuardZones = new EntitySet<GuardZone>(new Action<GuardZone>(this.attach_GuardZones), new Action<GuardZone>(this.detach_GuardZones));
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			this._OrganisationZones = new EntitySet<OrganisationZone>(new Action<OrganisationZone>(this.attach_OrganisationZones), new Action<OrganisationZone>(this.detach_OrganisationZones));
			this._OrganisationCardTemplates = new EntitySet<OrganisationCardTemplate>(new Action<OrganisationCardTemplate>(this.attach_OrganisationCardTemplates), new Action<OrganisationCardTemplate>(this.detach_OrganisationCardTemplates));
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhotoUID
		{
			get
			{
				return this._PhotoUID;
			}
			set
			{
				if ((this._PhotoUID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoUIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoUID = value;
					this.SendPropertyChanged("PhotoUID");
					this.OnPhotoUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_AccessTemplate", Storage="_AccessTemplates", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<AccessTemplate> AccessTemplates
		{
			get
			{
				return this._AccessTemplates;
			}
			set
			{
				this._AccessTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Employee", Storage="_Employees", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Position", Storage="_Positions", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<Position> Positions
		{
			get
			{
				return this._Positions;
			}
			set
			{
				this._Positions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_OrganisationDoor", Storage="_OrganisationDoors", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<OrganisationDoor> OrganisationDoors
		{
			get
			{
				return this._OrganisationDoors;
			}
			set
			{
				this._OrganisationDoors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_OrganisationUser", Storage="_OrganisationUsers", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<OrganisationUser> OrganisationUsers
		{
			get
			{
				return this._OrganisationUsers;
			}
			set
			{
				this._OrganisationUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Holiday", Storage="_Holidays", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<Holiday> Holidays
		{
			get
			{
				return this._Holidays;
			}
			set
			{
				this._Holidays.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_AdditionalColumnType", Storage="_AdditionalColumnTypes", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<AdditionalColumnType> AdditionalColumnTypes
		{
			get
			{
				return this._AdditionalColumnTypes;
			}
			set
			{
				this._AdditionalColumnTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Schedule", Storage="_Schedules", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_ScheduleScheme", Storage="_ScheduleSchemes", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<ScheduleScheme> ScheduleSchemes
		{
			get
			{
				return this._ScheduleSchemes;
			}
			set
			{
				this._ScheduleSchemes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_NamedInterval", Storage="_NamedIntervals", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<NamedInterval> NamedIntervals
		{
			get
			{
				return this._NamedIntervals;
			}
			set
			{
				this._NamedIntervals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Department", Storage="_Departments", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_GuardZone", Storage="_GuardZones", ThisKey="UID", OtherKey="ParentUID")]
		public EntitySet<GuardZone> GuardZones
		{
			get
			{
				return this._GuardZones;
			}
			set
			{
				this._GuardZones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Phone", Storage="_Phones", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_OrganisationZone", Storage="_OrganisationZones", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<OrganisationZone> OrganisationZones
		{
			get
			{
				return this._OrganisationZones;
			}
			set
			{
				this._OrganisationZones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_OrganisationCardTemplate", Storage="_OrganisationCardTemplates", ThisKey="UID", OtherKey="OrganisationUID")]
		public EntitySet<OrganisationCardTemplate> OrganisationCardTemplates
		{
			get
			{
				return this._OrganisationCardTemplates;
			}
			set
			{
				this._OrganisationCardTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Organisation", Storage="_Photo", ThisKey="PhotoUID", OtherKey="UID", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Organisations.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Organisations.Add(this);
						this._PhotoUID = value.UID;
					}
					else
					{
						this._PhotoUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessTemplates(AccessTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_AccessTemplates(AccessTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_OrganisationDoors(OrganisationDoor entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_OrganisationDoors(OrganisationDoor entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_OrganisationUsers(OrganisationUser entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_OrganisationUsers(OrganisationUser entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_Holidays(Holiday entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Holidays(Holiday entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_AdditionalColumnTypes(AdditionalColumnType entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_AdditionalColumnTypes(AdditionalColumnType entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_ScheduleSchemes(ScheduleScheme entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_ScheduleSchemes(ScheduleScheme entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_NamedIntervals(NamedInterval entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_NamedIntervals(NamedInterval entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_GuardZones(GuardZone entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_GuardZones(GuardZone entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_OrganisationZones(OrganisationZone entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_OrganisationZones(OrganisationZone entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
		
		private void attach_OrganisationCardTemplates(OrganisationCardTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = this;
		}
		
		private void detach_OrganisationCardTemplates(OrganisationCardTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Organisation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganisationDoor")]
	public partial class OrganisationDoor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Guid _DoorUID;
		
		private System.Guid _OrganisationUID;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnDoorUIDChanging(System.Guid value);
    partial void OnDoorUIDChanged();
    partial void OnOrganisationUIDChanging(System.Guid value);
    partial void OnOrganisationUIDChanged();
    #endregion
		
		public OrganisationDoor()
		{
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoorUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DoorUID
		{
			get
			{
				return this._DoorUID;
			}
			set
			{
				if ((this._DoorUID != value))
				{
					this.OnDoorUIDChanging(value);
					this.SendPropertyChanging();
					this._DoorUID = value;
					this.SendPropertyChanged("DoorUID");
					this.OnDoorUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_OrganisationDoor", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.OrganisationDoors.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.OrganisationDoors.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(System.Guid);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganisationUser")]
	public partial class OrganisationUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Guid _UserUID;
		
		private System.Guid _OrganisationUID;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnUserUIDChanging(System.Guid value);
    partial void OnUserUIDChanged();
    partial void OnOrganisationUIDChanging(System.Guid value);
    partial void OnOrganisationUIDChanged();
    #endregion
		
		public OrganisationUser()
		{
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserUID
		{
			get
			{
				return this._UserUID;
			}
			set
			{
				if ((this._UserUID != value))
				{
					this.OnUserUIDChanging(value);
					this.SendPropertyChanging();
					this._UserUID = value;
					this.SendPropertyChanged("UserUID");
					this.OnUserUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_OrganisationUser", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.OrganisationUsers.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.OrganisationUsers.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(System.Guid);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Holiday")]
	public partial class Holiday : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private int _Type;
		
		private System.DateTime _Date;
		
		private System.Nullable<System.DateTime> _TransferDate;
		
		private int _Reduction;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganisationUID;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTransferDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTransferDateChanged();
    partial void OnReductionChanging(int value);
    partial void OnReductionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganisationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganisationUIDChanged();
    #endregion
		
		public Holiday()
		{
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TransferDate
		{
			get
			{
				return this._TransferDate;
			}
			set
			{
				if ((this._TransferDate != value))
				{
					this.OnTransferDateChanging(value);
					this.SendPropertyChanging();
					this._TransferDate = value;
					this.SendPropertyChanged("TransferDate");
					this.OnTransferDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reduction", DbType="Int NOT NULL")]
		public int Reduction
		{
			get
			{
				return this._Reduction;
			}
			set
			{
				if ((this._Reduction != value))
				{
					this.OnReductionChanging(value);
					this.SendPropertyChanging();
					this._Reduction = value;
					this.SendPropertyChanged("Reduction");
					this.OnReductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Holiday", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Holidays.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Holidays.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdditionalColumn")]
	public partial class AdditionalColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Nullable<System.Guid> _EmployeeUID;
		
		private System.Nullable<System.Guid> _AdditionalColumnTypeUID;
		
		private string _TextData;
		
		private System.Nullable<System.Guid> _PhotoUID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<AdditionalColumnType> _AdditionalColumnType;
		
		private EntityRef<Photo> _Photo;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnEmployeeUIDChanging(System.Nullable<System.Guid> value);
    partial void OnEmployeeUIDChanged();
    partial void OnAdditionalColumnTypeUIDChanging(System.Nullable<System.Guid> value);
    partial void OnAdditionalColumnTypeUIDChanged();
    partial void OnTextDataChanging(string value);
    partial void OnTextDataChanged();
    partial void OnPhotoUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhotoUIDChanged();
    #endregion
		
		public AdditionalColumn()
		{
			this._Employee = default(EntityRef<Employee>);
			this._AdditionalColumnType = default(EntityRef<AdditionalColumnType>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EmployeeUID
		{
			get
			{
				return this._EmployeeUID;
			}
			set
			{
				if ((this._EmployeeUID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeUIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeUID = value;
					this.SendPropertyChanged("EmployeeUID");
					this.OnEmployeeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalColumnTypeUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AdditionalColumnTypeUID
		{
			get
			{
				return this._AdditionalColumnTypeUID;
			}
			set
			{
				if ((this._AdditionalColumnTypeUID != value))
				{
					if (this._AdditionalColumnType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdditionalColumnTypeUIDChanging(value);
					this.SendPropertyChanging();
					this._AdditionalColumnTypeUID = value;
					this.SendPropertyChanged("AdditionalColumnTypeUID");
					this.OnAdditionalColumnTypeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextData", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TextData
		{
			get
			{
				return this._TextData;
			}
			set
			{
				if ((this._TextData != value))
				{
					this.OnTextDataChanging(value);
					this.SendPropertyChanging();
					this._TextData = value;
					this.SendPropertyChanged("TextData");
					this.OnTextDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhotoUID
		{
			get
			{
				return this._PhotoUID;
			}
			set
			{
				if ((this._PhotoUID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoUIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoUID = value;
					this.SendPropertyChanged("PhotoUID");
					this.OnPhotoUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AdditionalColumn", Storage="_Employee", ThisKey="EmployeeUID", OtherKey="UID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.AdditionalColumns.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.AdditionalColumns.Add(this);
						this._EmployeeUID = value.UID;
					}
					else
					{
						this._EmployeeUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdditionalColumnType_AdditionalColumn", Storage="_AdditionalColumnType", ThisKey="AdditionalColumnTypeUID", OtherKey="UID", IsForeignKey=true)]
		public AdditionalColumnType AdditionalColumnType
		{
			get
			{
				return this._AdditionalColumnType.Entity;
			}
			set
			{
				AdditionalColumnType previousValue = this._AdditionalColumnType.Entity;
				if (((previousValue != value) 
							|| (this._AdditionalColumnType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdditionalColumnType.Entity = null;
						previousValue.AdditionalColumns.Remove(this);
					}
					this._AdditionalColumnType.Entity = value;
					if ((value != null))
					{
						value.AdditionalColumns.Add(this);
						this._AdditionalColumnTypeUID = value.UID;
					}
					else
					{
						this._AdditionalColumnTypeUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("AdditionalColumnType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_AdditionalColumn", Storage="_Photo", ThisKey="PhotoUID", OtherKey="UID", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.AdditionalColumns.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.AdditionalColumns.Add(this);
						this._PhotoUID = value.UID;
					}
					else
					{
						this._PhotoUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdditionalColumnType")]
	public partial class AdditionalColumnType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _DataType;
		
		private System.Nullable<int> _PersonType;
		
		private System.Nullable<System.Guid> _OrganisationUID;
		
		private bool _IsInGrid;
		
		private EntitySet<AdditionalColumn> _AdditionalColumns;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDataTypeChanging(System.Nullable<int> value);
    partial void OnDataTypeChanged();
    partial void OnPersonTypeChanging(System.Nullable<int> value);
    partial void OnPersonTypeChanged();
    partial void OnOrganisationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganisationUIDChanged();
    partial void OnIsInGridChanging(bool value);
    partial void OnIsInGridChanged();
    #endregion
		
		public AdditionalColumnType()
		{
			this._AdditionalColumns = new EntitySet<AdditionalColumn>(new Action<AdditionalColumn>(this.attach_AdditionalColumns), new Action<AdditionalColumn>(this.detach_AdditionalColumns));
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataType", DbType="Int")]
		public System.Nullable<int> DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonType", DbType="Int")]
		public System.Nullable<int> PersonType
		{
			get
			{
				return this._PersonType;
			}
			set
			{
				if ((this._PersonType != value))
				{
					this.OnPersonTypeChanging(value);
					this.SendPropertyChanging();
					this._PersonType = value;
					this.SendPropertyChanged("PersonType");
					this.OnPersonTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInGrid", DbType="Bit NOT NULL")]
		public bool IsInGrid
		{
			get
			{
				return this._IsInGrid;
			}
			set
			{
				if ((this._IsInGrid != value))
				{
					this.OnIsInGridChanging(value);
					this.SendPropertyChanging();
					this._IsInGrid = value;
					this.SendPropertyChanged("IsInGrid");
					this.OnIsInGridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdditionalColumnType_AdditionalColumn", Storage="_AdditionalColumns", ThisKey="UID", OtherKey="AdditionalColumnTypeUID")]
		public EntitySet<AdditionalColumn> AdditionalColumns
		{
			get
			{
				return this._AdditionalColumns;
			}
			set
			{
				this._AdditionalColumns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_AdditionalColumnType", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.AdditionalColumnTypes.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.AdditionalColumnTypes.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdditionalColumns(AdditionalColumn entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalColumnType = this;
		}
		
		private void detach_AdditionalColumns(AdditionalColumn entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalColumnType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _ScheduleSchemeUID;
		
		private bool _IsIgnoreHoliday;
		
		private bool _IsOnlyFirstEnter;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganisationUID;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<ScheduleZone> _ScheduleZones;
		
		private EntityRef<Organisation> _Organisation;
		
		private EntityRef<ScheduleScheme> _ScheduleScheme;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnScheduleSchemeUIDChanging(System.Nullable<System.Guid> value);
    partial void OnScheduleSchemeUIDChanged();
    partial void OnIsIgnoreHolidayChanging(bool value);
    partial void OnIsIgnoreHolidayChanged();
    partial void OnIsOnlyFirstEnterChanging(bool value);
    partial void OnIsOnlyFirstEnterChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganisationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganisationUIDChanged();
    #endregion
		
		public Schedule()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._ScheduleZones = new EntitySet<ScheduleZone>(new Action<ScheduleZone>(this.attach_ScheduleZones), new Action<ScheduleZone>(this.detach_ScheduleZones));
			this._Organisation = default(EntityRef<Organisation>);
			this._ScheduleScheme = default(EntityRef<ScheduleScheme>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleSchemeUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ScheduleSchemeUID
		{
			get
			{
				return this._ScheduleSchemeUID;
			}
			set
			{
				if ((this._ScheduleSchemeUID != value))
				{
					if (this._ScheduleScheme.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleSchemeUIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleSchemeUID = value;
					this.SendPropertyChanged("ScheduleSchemeUID");
					this.OnScheduleSchemeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIgnoreHoliday", DbType="Bit NOT NULL")]
		public bool IsIgnoreHoliday
		{
			get
			{
				return this._IsIgnoreHoliday;
			}
			set
			{
				if ((this._IsIgnoreHoliday != value))
				{
					this.OnIsIgnoreHolidayChanging(value);
					this.SendPropertyChanging();
					this._IsIgnoreHoliday = value;
					this.SendPropertyChanged("IsIgnoreHoliday");
					this.OnIsIgnoreHolidayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnlyFirstEnter", DbType="Bit NOT NULL")]
		public bool IsOnlyFirstEnter
		{
			get
			{
				return this._IsOnlyFirstEnter;
			}
			set
			{
				if ((this._IsOnlyFirstEnter != value))
				{
					this.OnIsOnlyFirstEnterChanging(value);
					this.SendPropertyChanging();
					this._IsOnlyFirstEnter = value;
					this.SendPropertyChanged("IsOnlyFirstEnter");
					this.OnIsOnlyFirstEnterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Employee", Storage="_Employees", ThisKey="UID", OtherKey="ScheduleUID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_ScheduleZone", Storage="_ScheduleZones", ThisKey="UID", OtherKey="ScheduleUID")]
		public EntitySet<ScheduleZone> ScheduleZones
		{
			get
			{
				return this._ScheduleZones;
			}
			set
			{
				this._ScheduleZones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Schedule", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleScheme_Schedule", Storage="_ScheduleScheme", ThisKey="ScheduleSchemeUID", OtherKey="UID", IsForeignKey=true)]
		public ScheduleScheme ScheduleScheme
		{
			get
			{
				return this._ScheduleScheme.Entity;
			}
			set
			{
				ScheduleScheme previousValue = this._ScheduleScheme.Entity;
				if (((previousValue != value) 
							|| (this._ScheduleScheme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScheduleScheme.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._ScheduleScheme.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._ScheduleSchemeUID = value.UID;
					}
					else
					{
						this._ScheduleSchemeUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ScheduleScheme");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
		
		private void attach_ScheduleZones(ScheduleZone entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_ScheduleZones(ScheduleZone entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScheduleScheme")]
	public partial class ScheduleScheme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private int _Type;
		
		private string _Description;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganisationUID;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntitySet<Day> _Days;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganisationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganisationUIDChanged();
    #endregion
		
		public ScheduleScheme()
		{
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Days = new EntitySet<Day>(new Action<Day>(this.attach_Days), new Action<Day>(this.detach_Days));
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleScheme_Schedule", Storage="_Schedules", ThisKey="UID", OtherKey="ScheduleSchemeUID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleScheme_Day", Storage="_Days", ThisKey="UID", OtherKey="ScheduleSchemeUID")]
		public EntitySet<Day> Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				this._Days.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_ScheduleScheme", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.ScheduleSchemes.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.ScheduleSchemes.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleScheme = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleScheme = null;
		}
		
		private void attach_Days(Day entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleScheme = this;
		}
		
		private void detach_Days(Day entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleScheme = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScheduleZone")]
	public partial class ScheduleZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Guid _ZoneUID;
		
		private System.Guid _ScheduleUID;
		
		private bool _IsControl;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private EntityRef<Schedule> _Schedule;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnZoneUIDChanging(System.Guid value);
    partial void OnZoneUIDChanged();
    partial void OnScheduleUIDChanging(System.Guid value);
    partial void OnScheduleUIDChanged();
    partial void OnIsControlChanging(bool value);
    partial void OnIsControlChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    #endregion
		
		public ScheduleZone()
		{
			this._Schedule = default(EntityRef<Schedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ZoneUID
		{
			get
			{
				return this._ZoneUID;
			}
			set
			{
				if ((this._ZoneUID != value))
				{
					this.OnZoneUIDChanging(value);
					this.SendPropertyChanging();
					this._ZoneUID = value;
					this.SendPropertyChanged("ZoneUID");
					this.OnZoneUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ScheduleUID
		{
			get
			{
				return this._ScheduleUID;
			}
			set
			{
				if ((this._ScheduleUID != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleUIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleUID = value;
					this.SendPropertyChanged("ScheduleUID");
					this.OnScheduleUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsControl", DbType="Bit NOT NULL")]
		public bool IsControl
		{
			get
			{
				return this._IsControl;
			}
			set
			{
				if ((this._IsControl != value))
				{
					this.OnIsControlChanging(value);
					this.SendPropertyChanging();
					this._IsControl = value;
					this.SendPropertyChanged("IsControl");
					this.OnIsControlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_ScheduleZone", Storage="_Schedule", ThisKey="ScheduleUID", OtherKey="UID", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.ScheduleZones.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.ScheduleZones.Add(this);
						this._ScheduleUID = value.UID;
					}
					else
					{
						this._ScheduleUID = default(System.Guid);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Interval")]
	public partial class Interval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BeginTime;
		
		private int _EndTime;
		
		private System.Guid _UID;
		
		private System.Guid _NamedIntervalUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private EntityRef<NamedInterval> _NamedInterval;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBeginTimeChanging(int value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(int value);
    partial void OnEndTimeChanged();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNamedIntervalUIDChanging(System.Guid value);
    partial void OnNamedIntervalUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    #endregion
		
		public Interval()
		{
			this._NamedInterval = default(EntityRef<NamedInterval>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginTime", DbType="Int NOT NULL")]
		public int BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Int NOT NULL")]
		public int EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NamedIntervalUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid NamedIntervalUID
		{
			get
			{
				return this._NamedIntervalUID;
			}
			set
			{
				if ((this._NamedIntervalUID != value))
				{
					if (this._NamedInterval.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNamedIntervalUIDChanging(value);
					this.SendPropertyChanging();
					this._NamedIntervalUID = value;
					this.SendPropertyChanged("NamedIntervalUID");
					this.OnNamedIntervalUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedInterval_Interval", Storage="_NamedInterval", ThisKey="NamedIntervalUID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public NamedInterval NamedInterval
		{
			get
			{
				return this._NamedInterval.Entity;
			}
			set
			{
				NamedInterval previousValue = this._NamedInterval.Entity;
				if (((previousValue != value) 
							|| (this._NamedInterval.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NamedInterval.Entity = null;
						previousValue.Intervals.Remove(this);
					}
					this._NamedInterval.Entity = value;
					if ((value != null))
					{
						value.Intervals.Add(this);
						this._NamedIntervalUID = value.UID;
					}
					else
					{
						this._NamedIntervalUID = default(System.Guid);
					}
					this.SendPropertyChanged("NamedInterval");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NamedInterval")]
	public partial class NamedInterval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private string _Description;
		
		private int _SlideTime;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganisationUID;
		
		private EntitySet<Interval> _Intervals;
		
		private EntitySet<Day> _Days;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSlideTimeChanging(int value);
    partial void OnSlideTimeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganisationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganisationUIDChanged();
    #endregion
		
		public NamedInterval()
		{
			this._Intervals = new EntitySet<Interval>(new Action<Interval>(this.attach_Intervals), new Action<Interval>(this.detach_Intervals));
			this._Days = new EntitySet<Day>(new Action<Day>(this.attach_Days), new Action<Day>(this.detach_Days));
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlideTime", DbType="Int NOT NULL")]
		public int SlideTime
		{
			get
			{
				return this._SlideTime;
			}
			set
			{
				if ((this._SlideTime != value))
				{
					this.OnSlideTimeChanging(value);
					this.SendPropertyChanging();
					this._SlideTime = value;
					this.SendPropertyChanged("SlideTime");
					this.OnSlideTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedInterval_Interval", Storage="_Intervals", ThisKey="UID", OtherKey="NamedIntervalUID")]
		public EntitySet<Interval> Intervals
		{
			get
			{
				return this._Intervals;
			}
			set
			{
				this._Intervals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedInterval_Day", Storage="_Days", ThisKey="UID", OtherKey="NamedIntervalUID")]
		public EntitySet<Day> Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				this._Days.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_NamedInterval", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.NamedIntervals.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.NamedIntervals.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Intervals(Interval entity)
		{
			this.SendPropertyChanging();
			entity.NamedInterval = this;
		}
		
		private void detach_Intervals(Interval entity)
		{
			this.SendPropertyChanging();
			entity.NamedInterval = null;
		}
		
		private void attach_Days(Day entity)
		{
			this.SendPropertyChanging();
			entity.NamedInterval = this;
		}
		
		private void detach_Days(Day entity)
		{
			this.SendPropertyChanging();
			entity.NamedInterval = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Day")]
	public partial class Day : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Nullable<System.Guid> _NamedIntervalUID;
		
		private System.Guid _ScheduleSchemeUID;
		
		private int _Number;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private EntityRef<NamedInterval> _NamedInterval;
		
		private EntityRef<ScheduleScheme> _ScheduleScheme;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNamedIntervalUIDChanging(System.Nullable<System.Guid> value);
    partial void OnNamedIntervalUIDChanged();
    partial void OnScheduleSchemeUIDChanging(System.Guid value);
    partial void OnScheduleSchemeUIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    #endregion
		
		public Day()
		{
			this._NamedInterval = default(EntityRef<NamedInterval>);
			this._ScheduleScheme = default(EntityRef<ScheduleScheme>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NamedIntervalUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NamedIntervalUID
		{
			get
			{
				return this._NamedIntervalUID;
			}
			set
			{
				if ((this._NamedIntervalUID != value))
				{
					if (this._NamedInterval.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNamedIntervalUIDChanging(value);
					this.SendPropertyChanging();
					this._NamedIntervalUID = value;
					this.SendPropertyChanged("NamedIntervalUID");
					this.OnNamedIntervalUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleSchemeUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ScheduleSchemeUID
		{
			get
			{
				return this._ScheduleSchemeUID;
			}
			set
			{
				if ((this._ScheduleSchemeUID != value))
				{
					if (this._ScheduleScheme.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleSchemeUIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleSchemeUID = value;
					this.SendPropertyChanged("ScheduleSchemeUID");
					this.OnScheduleSchemeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedInterval_Day", Storage="_NamedInterval", ThisKey="NamedIntervalUID", OtherKey="UID", IsForeignKey=true)]
		public NamedInterval NamedInterval
		{
			get
			{
				return this._NamedInterval.Entity;
			}
			set
			{
				NamedInterval previousValue = this._NamedInterval.Entity;
				if (((previousValue != value) 
							|| (this._NamedInterval.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NamedInterval.Entity = null;
						previousValue.Days.Remove(this);
					}
					this._NamedInterval.Entity = value;
					if ((value != null))
					{
						value.Days.Add(this);
						this._NamedIntervalUID = value.UID;
					}
					else
					{
						this._NamedIntervalUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("NamedInterval");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleScheme_Day", Storage="_ScheduleScheme", ThisKey="ScheduleSchemeUID", OtherKey="UID", IsForeignKey=true)]
		public ScheduleScheme ScheduleScheme
		{
			get
			{
				return this._ScheduleScheme.Entity;
			}
			set
			{
				ScheduleScheme previousValue = this._ScheduleScheme.Entity;
				if (((previousValue != value) 
							|| (this._ScheduleScheme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScheduleScheme.Entity = null;
						previousValue.Days.Remove(this);
					}
					this._ScheduleScheme.Entity = value;
					if ((value != null))
					{
						value.Days.Add(this);
						this._ScheduleSchemeUID = value.UID;
					}
					else
					{
						this._ScheduleSchemeUID = default(System.Guid);
					}
					this.SendPropertyChanged("ScheduleScheme");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _PhotoUID;
		
		private System.Nullable<System.Guid> _ParentDepartmentUID;
		
		private System.Nullable<System.Guid> _ContactEmployeeUID;
		
		private System.Nullable<System.Guid> _AttendantUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganisationUID;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Phone> _Phones;
		
		private EntityRef<Department> _Department1;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<Organisation> _Organisation;
		
		private EntityRef<Photo> _Photo;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPhotoUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhotoUIDChanged();
    partial void OnParentDepartmentUIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentDepartmentUIDChanged();
    partial void OnContactEmployeeUIDChanging(System.Nullable<System.Guid> value);
    partial void OnContactEmployeeUIDChanged();
    partial void OnAttendantUIDChanging(System.Nullable<System.Guid> value);
    partial void OnAttendantUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganisationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganisationUIDChanged();
    #endregion
		
		public Department()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			this._Department1 = default(EntityRef<Department>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._Organisation = default(EntityRef<Organisation>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhotoUID
		{
			get
			{
				return this._PhotoUID;
			}
			set
			{
				if ((this._PhotoUID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoUIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoUID = value;
					this.SendPropertyChanged("PhotoUID");
					this.OnPhotoUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentDepartmentUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentDepartmentUID
		{
			get
			{
				return this._ParentDepartmentUID;
			}
			set
			{
				if ((this._ParentDepartmentUID != value))
				{
					if (this._Department1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentDepartmentUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentDepartmentUID = value;
					this.SendPropertyChanged("ParentDepartmentUID");
					this.OnParentDepartmentUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEmployeeUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ContactEmployeeUID
		{
			get
			{
				return this._ContactEmployeeUID;
			}
			set
			{
				if ((this._ContactEmployeeUID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactEmployeeUIDChanging(value);
					this.SendPropertyChanging();
					this._ContactEmployeeUID = value;
					this.SendPropertyChanged("ContactEmployeeUID");
					this.OnContactEmployeeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendantUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AttendantUID
		{
			get
			{
				return this._AttendantUID;
			}
			set
			{
				if ((this._AttendantUID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttendantUIDChanging(value);
					this.SendPropertyChanging();
					this._AttendantUID = value;
					this.SendPropertyChanged("AttendantUID");
					this.OnAttendantUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Employees", ThisKey="UID", OtherKey="DepartmentUID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Department", Storage="_Departments", ThisKey="UID", OtherKey="ParentDepartmentUID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Phone", Storage="_Phones", ThisKey="UID", OtherKey="DepartmentUID")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Department", Storage="_Department1", ThisKey="ParentDepartmentUID", OtherKey="UID", IsForeignKey=true)]
		public Department Department1
		{
			get
			{
				return this._Department1.Entity;
			}
			set
			{
				Department previousValue = this._Department1.Entity;
				if (((previousValue != value) 
							|| (this._Department1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department1.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Department1.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._ParentDepartmentUID = value.UID;
					}
					else
					{
						this._ParentDepartmentUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Department1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Department", Storage="_Employee", ThisKey="ContactEmployeeUID", OtherKey="UID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._ContactEmployeeUID = value.UID;
					}
					else
					{
						this._ContactEmployeeUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Department1", Storage="_Employee1", ThisKey="AttendantUID", OtherKey="UID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Departments1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Departments1.Add(this);
						this._AttendantUID = value.UID;
					}
					else
					{
						this._AttendantUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Department", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Department", Storage="_Photo", ThisKey="PhotoUID", OtherKey="UID", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._PhotoUID = value.UID;
					}
					else
					{
						this._PhotoUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = null;
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GuardZone")]
	public partial class GuardZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Guid _ZoneUID;
		
		private System.Guid _ParentUID;
		
		private bool _CanSet;
		
		private bool _CanReset;
		
		private EntityRef<AccessTemplate> _AccessTemplate;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnZoneUIDChanging(System.Guid value);
    partial void OnZoneUIDChanged();
    partial void OnParentUIDChanging(System.Guid value);
    partial void OnParentUIDChanged();
    partial void OnCanSetChanging(bool value);
    partial void OnCanSetChanged();
    partial void OnCanResetChanging(bool value);
    partial void OnCanResetChanged();
    #endregion
		
		public GuardZone()
		{
			this._AccessTemplate = default(EntityRef<AccessTemplate>);
			this._Employee = default(EntityRef<Employee>);
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ZoneUID
		{
			get
			{
				return this._ZoneUID;
			}
			set
			{
				if ((this._ZoneUID != value))
				{
					this.OnZoneUIDChanging(value);
					this.SendPropertyChanging();
					this._ZoneUID = value;
					this.SendPropertyChanged("ZoneUID");
					this.OnZoneUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ParentUID
		{
			get
			{
				return this._ParentUID;
			}
			set
			{
				if ((this._ParentUID != value))
				{
					if (((this._AccessTemplate.HasLoadedOrAssignedValue || this._Employee.HasLoadedOrAssignedValue) 
								|| this._Organisation.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentUID = value;
					this.SendPropertyChanged("ParentUID");
					this.OnParentUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanSet", DbType="Bit NOT NULL")]
		public bool CanSet
		{
			get
			{
				return this._CanSet;
			}
			set
			{
				if ((this._CanSet != value))
				{
					this.OnCanSetChanging(value);
					this.SendPropertyChanging();
					this._CanSet = value;
					this.SendPropertyChanged("CanSet");
					this.OnCanSetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanReset", DbType="Bit NOT NULL")]
		public bool CanReset
		{
			get
			{
				return this._CanReset;
			}
			set
			{
				if ((this._CanReset != value))
				{
					this.OnCanResetChanging(value);
					this.SendPropertyChanging();
					this._CanReset = value;
					this.SendPropertyChanged("CanReset");
					this.OnCanResetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessTemplate_GuardZone", Storage="_AccessTemplate", ThisKey="ParentUID", OtherKey="UID", IsForeignKey=true)]
		public AccessTemplate AccessTemplate
		{
			get
			{
				return this._AccessTemplate.Entity;
			}
			set
			{
				AccessTemplate previousValue = this._AccessTemplate.Entity;
				if (((previousValue != value) 
							|| (this._AccessTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessTemplate.Entity = null;
						previousValue.GuardZones.Remove(this);
					}
					this._AccessTemplate.Entity = value;
					if ((value != null))
					{
						value.GuardZones.Add(this);
						this._ParentUID = value.UID;
					}
					else
					{
						this._ParentUID = default(System.Guid);
					}
					this.SendPropertyChanged("AccessTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_GuardZone", Storage="_Employee", ThisKey="ParentUID", OtherKey="UID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.GuardZones.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.GuardZones.Add(this);
						this._ParentUID = value.UID;
					}
					else
					{
						this._ParentUID = default(System.Guid);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_GuardZone", Storage="_Organisation", ThisKey="ParentUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.GuardZones.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.GuardZones.Add(this);
						this._ParentUID = value.UID;
					}
					else
					{
						this._ParentUID = default(System.Guid);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patches")]
	public partial class Patch
	{
		
		private string _Id;
		
		public Patch()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phone")]
	public partial class Phone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private string _NumberString;
		
		private System.Nullable<System.Guid> _DepartmentUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganisationUID;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberStringChanging(string value);
    partial void OnNumberStringChanged();
    partial void OnDepartmentUIDChanging(System.Nullable<System.Guid> value);
    partial void OnDepartmentUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganisationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganisationUIDChanged();
    #endregion
		
		public Phone()
		{
			this._Department = default(EntityRef<Department>);
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberString", DbType="NVarChar(50)")]
		public string NumberString
		{
			get
			{
				return this._NumberString;
			}
			set
			{
				if ((this._NumberString != value))
				{
					this.OnNumberStringChanging(value);
					this.SendPropertyChanging();
					this._NumberString = value;
					this.SendPropertyChanged("NumberString");
					this.OnNumberStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DepartmentUID
		{
			get
			{
				return this._DepartmentUID;
			}
			set
			{
				if ((this._DepartmentUID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentUIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentUID = value;
					this.SendPropertyChanged("DepartmentUID");
					this.OnDepartmentUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Phone", Storage="_Department", ThisKey="DepartmentUID", OtherKey="UID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._DepartmentUID = value.UID;
					}
					else
					{
						this._DepartmentUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_Phone", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photo")]
	public partial class Photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Data.Linq.Binary _Data;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Position> _Positions;
		
		private EntitySet<Organisation> _Organisations;
		
		private EntitySet<AdditionalColumn> _AdditionalColumns;
		
		private EntitySet<Department> _Departments;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public Photo()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Positions = new EntitySet<Position>(new Action<Position>(this.attach_Positions), new Action<Position>(this.detach_Positions));
			this._Organisations = new EntitySet<Organisation>(new Action<Organisation>(this.attach_Organisations), new Action<Organisation>(this.detach_Organisations));
			this._AdditionalColumns = new EntitySet<AdditionalColumn>(new Action<AdditionalColumn>(this.attach_AdditionalColumns), new Action<AdditionalColumn>(this.detach_AdditionalColumns));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Employee", Storage="_Employees", ThisKey="UID", OtherKey="PhotoUID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Position", Storage="_Positions", ThisKey="UID", OtherKey="PhotoUID")]
		public EntitySet<Position> Positions
		{
			get
			{
				return this._Positions;
			}
			set
			{
				this._Positions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Organisation", Storage="_Organisations", ThisKey="UID", OtherKey="PhotoUID")]
		public EntitySet<Organisation> Organisations
		{
			get
			{
				return this._Organisations;
			}
			set
			{
				this._Organisations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_AdditionalColumn", Storage="_AdditionalColumns", ThisKey="UID", OtherKey="PhotoUID")]
		public EntitySet<AdditionalColumn> AdditionalColumns
		{
			get
			{
				return this._AdditionalColumns;
			}
			set
			{
				this._AdditionalColumns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Department", Storage="_Departments", ThisKey="UID", OtherKey="PhotoUID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Organisations(Organisation entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Organisations(Organisation entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_AdditionalColumns(AdditionalColumn entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_AdditionalColumns(AdditionalColumn entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganisationZone")]
	public partial class OrganisationZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Guid _ZoneUID;
		
		private System.Guid _OrganisationUID;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnZoneUIDChanging(System.Guid value);
    partial void OnZoneUIDChanged();
    partial void OnOrganisationUIDChanging(System.Guid value);
    partial void OnOrganisationUIDChanged();
    #endregion
		
		public OrganisationZone()
		{
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ZoneUID
		{
			get
			{
				return this._ZoneUID;
			}
			set
			{
				if ((this._ZoneUID != value))
				{
					this.OnZoneUIDChanging(value);
					this.SendPropertyChanging();
					this._ZoneUID = value;
					this.SendPropertyChanged("ZoneUID");
					this.OnZoneUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_OrganisationZone", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.OrganisationZones.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.OrganisationZones.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(System.Guid);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PendingCard")]
	public partial class PendingCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Guid _CardUID;
		
		private System.Guid _ControllerUID;
		
		private int _Action;
		
		private EntityRef<Card> _Card;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnCardUIDChanging(System.Guid value);
    partial void OnCardUIDChanged();
    partial void OnControllerUIDChanging(System.Guid value);
    partial void OnControllerUIDChanged();
    partial void OnActionChanging(int value);
    partial void OnActionChanged();
    #endregion
		
		public PendingCard()
		{
			this._Card = default(EntityRef<Card>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CardUID
		{
			get
			{
				return this._CardUID;
			}
			set
			{
				if ((this._CardUID != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardUIDChanging(value);
					this.SendPropertyChanging();
					this._CardUID = value;
					this.SendPropertyChanged("CardUID");
					this.OnCardUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControllerUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ControllerUID
		{
			get
			{
				return this._ControllerUID;
			}
			set
			{
				if ((this._ControllerUID != value))
				{
					this.OnControllerUIDChanging(value);
					this.SendPropertyChanging();
					this._ControllerUID = value;
					this.SendPropertyChanged("ControllerUID");
					this.OnControllerUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="Int NOT NULL")]
		public int Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_PendingCard", Storage="_Card", ThisKey="CardUID", OtherKey="UID", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.PendingCards.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.PendingCards.Add(this);
						this._CardUID = value.UID;
					}
					else
					{
						this._CardUID = default(System.Guid);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganisationCardTemplate")]
	public partial class OrganisationCardTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Guid _CardTemplateUID;
		
		private System.Guid _OrganisationUID;
		
		private EntityRef<Organisation> _Organisation;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnCardTemplateUIDChanging(System.Guid value);
    partial void OnCardTemplateUIDChanged();
    partial void OnOrganisationUIDChanging(System.Guid value);
    partial void OnOrganisationUIDChanged();
    #endregion
		
		public OrganisationCardTemplate()
		{
			this._Organisation = default(EntityRef<Organisation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardTemplateUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CardTemplateUID
		{
			get
			{
				return this._CardTemplateUID;
			}
			set
			{
				if ((this._CardTemplateUID != value))
				{
					this.OnCardTemplateUIDChanging(value);
					this.SendPropertyChanging();
					this._CardTemplateUID = value;
					this.SendPropertyChanged("CardTemplateUID");
					this.OnCardTemplateUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganisationUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrganisationUID
		{
			get
			{
				return this._OrganisationUID;
			}
			set
			{
				if ((this._OrganisationUID != value))
				{
					if (this._Organisation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganisationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganisationUID = value;
					this.SendPropertyChanged("OrganisationUID");
					this.OnOrganisationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organisation_OrganisationCardTemplate", Storage="_Organisation", ThisKey="OrganisationUID", OtherKey="UID", IsForeignKey=true)]
		public Organisation Organisation
		{
			get
			{
				return this._Organisation.Entity;
			}
			set
			{
				Organisation previousValue = this._Organisation.Entity;
				if (((previousValue != value) 
							|| (this._Organisation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organisation.Entity = null;
						previousValue.OrganisationCardTemplates.Remove(this);
					}
					this._Organisation.Entity = value;
					if ((value != null))
					{
						value.OrganisationCardTemplates.Add(this);
						this._OrganisationUID = value.UID;
					}
					else
					{
						this._OrganisationUID = default(System.Guid);
					}
					this.SendPropertyChanged("Organisation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CardDoor")]
	public partial class CardDoor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Guid _DoorUID;
		
		private System.Nullable<System.Guid> _ParentUID;
		
		private System.Nullable<int> _ParentType;
		
		private int _EnterIntervalID;
		
		private System.Nullable<int> _EnterIntervalType;
		
		private int _ExitIntervalID;
		
		private System.Nullable<int> _ExitIntervalType;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private EntityRef<AccessTemplate> _AccessTemplate;
		
		private EntityRef<Card> _Card;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnDoorUIDChanging(System.Guid value);
    partial void OnDoorUIDChanged();
    partial void OnParentUIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentUIDChanged();
    partial void OnParentTypeChanging(System.Nullable<int> value);
    partial void OnParentTypeChanged();
    partial void OnEnterIntervalIDChanging(int value);
    partial void OnEnterIntervalIDChanged();
    partial void OnEnterIntervalTypeChanging(System.Nullable<int> value);
    partial void OnEnterIntervalTypeChanged();
    partial void OnExitIntervalIDChanging(int value);
    partial void OnExitIntervalIDChanged();
    partial void OnExitIntervalTypeChanging(System.Nullable<int> value);
    partial void OnExitIntervalTypeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    #endregion
		
		public CardDoor()
		{
			this._AccessTemplate = default(EntityRef<AccessTemplate>);
			this._Card = default(EntityRef<Card>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoorUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DoorUID
		{
			get
			{
				return this._DoorUID;
			}
			set
			{
				if ((this._DoorUID != value))
				{
					this.OnDoorUIDChanging(value);
					this.SendPropertyChanging();
					this._DoorUID = value;
					this.SendPropertyChanged("DoorUID");
					this.OnDoorUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentUID
		{
			get
			{
				return this._ParentUID;
			}
			set
			{
				if ((this._ParentUID != value))
				{
					if ((this._AccessTemplate.HasLoadedOrAssignedValue || this._Card.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentUID = value;
					this.SendPropertyChanged("ParentUID");
					this.OnParentUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentType", DbType="Int")]
		public System.Nullable<int> ParentType
		{
			get
			{
				return this._ParentType;
			}
			set
			{
				if ((this._ParentType != value))
				{
					this.OnParentTypeChanging(value);
					this.SendPropertyChanging();
					this._ParentType = value;
					this.SendPropertyChanged("ParentType");
					this.OnParentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterIntervalID", DbType="Int NOT NULL")]
		public int EnterIntervalID
		{
			get
			{
				return this._EnterIntervalID;
			}
			set
			{
				if ((this._EnterIntervalID != value))
				{
					this.OnEnterIntervalIDChanging(value);
					this.SendPropertyChanging();
					this._EnterIntervalID = value;
					this.SendPropertyChanged("EnterIntervalID");
					this.OnEnterIntervalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterIntervalType", DbType="Int")]
		public System.Nullable<int> EnterIntervalType
		{
			get
			{
				return this._EnterIntervalType;
			}
			set
			{
				if ((this._EnterIntervalType != value))
				{
					this.OnEnterIntervalTypeChanging(value);
					this.SendPropertyChanging();
					this._EnterIntervalType = value;
					this.SendPropertyChanged("EnterIntervalType");
					this.OnEnterIntervalTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitIntervalID", DbType="Int NOT NULL")]
		public int ExitIntervalID
		{
			get
			{
				return this._ExitIntervalID;
			}
			set
			{
				if ((this._ExitIntervalID != value))
				{
					this.OnExitIntervalIDChanging(value);
					this.SendPropertyChanging();
					this._ExitIntervalID = value;
					this.SendPropertyChanged("ExitIntervalID");
					this.OnExitIntervalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitIntervalType", DbType="Int")]
		public System.Nullable<int> ExitIntervalType
		{
			get
			{
				return this._ExitIntervalType;
			}
			set
			{
				if ((this._ExitIntervalType != value))
				{
					this.OnExitIntervalTypeChanging(value);
					this.SendPropertyChanging();
					this._ExitIntervalType = value;
					this.SendPropertyChanged("ExitIntervalType");
					this.OnExitIntervalTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessTemplate_CardDoor", Storage="_AccessTemplate", ThisKey="ParentUID", OtherKey="UID", IsForeignKey=true)]
		public AccessTemplate AccessTemplate
		{
			get
			{
				return this._AccessTemplate.Entity;
			}
			set
			{
				AccessTemplate previousValue = this._AccessTemplate.Entity;
				if (((previousValue != value) 
							|| (this._AccessTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessTemplate.Entity = null;
						previousValue.CardDoors.Remove(this);
					}
					this._AccessTemplate.Entity = value;
					if ((value != null))
					{
						value.CardDoors.Add(this);
						this._ParentUID = value.UID;
					}
					else
					{
						this._ParentUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("AccessTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_CardDoor", Storage="_Card", ThisKey="ParentUID", OtherKey="UID", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.CardDoors.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.CardDoors.Add(this);
						this._ParentUID = value.UID;
					}
					else
					{
						this._ParentUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Journal")]
	public partial class Journal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.DateTime _SystemDate;
		
		private System.DateTime _DeviceDate;
		
		private int _Subsystem;
		
		private int _Name;
		
		private int _Description;
		
		private string _NameText;
		
		private string _DescriptionText;
		
		private int _State;
		
		private int _ObjectType;
		
		private string _ObjectName;
		
		private System.Guid _ObjectUID;
		
		private string _UserName;
		
		private System.Nullable<System.Guid> _EmployeeUID;
		
		private EntityRef<Card> _Card;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnSystemDateChanging(System.DateTime value);
    partial void OnSystemDateChanged();
    partial void OnDeviceDateChanging(System.DateTime value);
    partial void OnDeviceDateChanged();
    partial void OnSubsystemChanging(int value);
    partial void OnSubsystemChanged();
    partial void OnNameChanging(int value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(int value);
    partial void OnDescriptionChanged();
    partial void OnNameTextChanging(string value);
    partial void OnNameTextChanged();
    partial void OnDescriptionTextChanging(string value);
    partial void OnDescriptionTextChanged();
    partial void OnStateChanging(int value);
    partial void OnStateChanged();
    partial void OnObjectTypeChanging(int value);
    partial void OnObjectTypeChanged();
    partial void OnObjectNameChanging(string value);
    partial void OnObjectNameChanged();
    partial void OnObjectUIDChanging(System.Guid value);
    partial void OnObjectUIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmployeeUIDChanging(System.Nullable<System.Guid> value);
    partial void OnEmployeeUIDChanged();
    #endregion
		
		public Journal()
		{
			this._Card = default(EntityRef<Card>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemDate", DbType="DateTime NOT NULL")]
		public System.DateTime SystemDate
		{
			get
			{
				return this._SystemDate;
			}
			set
			{
				if ((this._SystemDate != value))
				{
					this.OnSystemDateChanging(value);
					this.SendPropertyChanging();
					this._SystemDate = value;
					this.SendPropertyChanged("SystemDate");
					this.OnSystemDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceDate", DbType="DateTime NOT NULL")]
		public System.DateTime DeviceDate
		{
			get
			{
				return this._DeviceDate;
			}
			set
			{
				if ((this._DeviceDate != value))
				{
					this.OnDeviceDateChanging(value);
					this.SendPropertyChanging();
					this._DeviceDate = value;
					this.SendPropertyChanged("DeviceDate");
					this.OnDeviceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subsystem", DbType="Int NOT NULL")]
		public int Subsystem
		{
			get
			{
				return this._Subsystem;
			}
			set
			{
				if ((this._Subsystem != value))
				{
					this.OnSubsystemChanging(value);
					this.SendPropertyChanging();
					this._Subsystem = value;
					this.SendPropertyChanged("Subsystem");
					this.OnSubsystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Int NOT NULL")]
		public int Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Int NOT NULL")]
		public int Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameText", DbType="NVarChar(50)")]
		public string NameText
		{
			get
			{
				return this._NameText;
			}
			set
			{
				if ((this._NameText != value))
				{
					this.OnNameTextChanging(value);
					this.SendPropertyChanging();
					this._NameText = value;
					this.SendPropertyChanged("NameText");
					this.OnNameTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionText", DbType="NVarChar(MAX)")]
		public string DescriptionText
		{
			get
			{
				return this._DescriptionText;
			}
			set
			{
				if ((this._DescriptionText != value))
				{
					this.OnDescriptionTextChanging(value);
					this.SendPropertyChanging();
					this._DescriptionText = value;
					this.SendPropertyChanged("DescriptionText");
					this.OnDescriptionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int NOT NULL")]
		public int State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectType", DbType="Int NOT NULL")]
		public int ObjectType
		{
			get
			{
				return this._ObjectType;
			}
			set
			{
				if ((this._ObjectType != value))
				{
					this.OnObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ObjectType = value;
					this.SendPropertyChanged("ObjectType");
					this.OnObjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectName", DbType="NVarChar(50)")]
		public string ObjectName
		{
			get
			{
				return this._ObjectName;
			}
			set
			{
				if ((this._ObjectName != value))
				{
					this.OnObjectNameChanging(value);
					this.SendPropertyChanging();
					this._ObjectName = value;
					this.SendPropertyChanged("ObjectName");
					this.OnObjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ObjectUID
		{
			get
			{
				return this._ObjectUID;
			}
			set
			{
				if ((this._ObjectUID != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectUIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectUID = value;
					this.SendPropertyChanged("ObjectUID");
					this.OnObjectUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EmployeeUID
		{
			get
			{
				return this._EmployeeUID;
			}
			set
			{
				if ((this._EmployeeUID != value))
				{
					this.OnEmployeeUIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeUID = value;
					this.SendPropertyChanged("EmployeeUID");
					this.OnEmployeeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_Journal", Storage="_Card", ThisKey="ObjectUID", OtherKey="UID", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.Journals.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.Journals.Add(this);
						this._ObjectUID = value.UID;
					}
					else
					{
						this._ObjectUID = default(System.Guid);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PassJournal")]
	public partial class PassJournal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Guid _EmployeeUID;
		
		private System.Guid _ZoneUID;
		
		private System.Nullable<System.DateTime> _EnterTime;
		
		private System.Nullable<System.DateTime> _ExitTime;
		
		private EntityRef<Employee> _Employee;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnEmployeeUIDChanging(System.Guid value);
    partial void OnEmployeeUIDChanged();
    partial void OnZoneUIDChanging(System.Guid value);
    partial void OnZoneUIDChanged();
    partial void OnEnterTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEnterTimeChanged();
    partial void OnExitTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnExitTimeChanged();
    #endregion
		
		public PassJournal()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EmployeeUID
		{
			get
			{
				return this._EmployeeUID;
			}
			set
			{
				if ((this._EmployeeUID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeUIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeUID = value;
					this.SendPropertyChanged("EmployeeUID");
					this.OnEmployeeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ZoneUID
		{
			get
			{
				return this._ZoneUID;
			}
			set
			{
				if ((this._ZoneUID != value))
				{
					this.OnZoneUIDChanging(value);
					this.SendPropertyChanging();
					this._ZoneUID = value;
					this.SendPropertyChanged("ZoneUID");
					this.OnZoneUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnterTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EnterTime
		{
			get
			{
				return this._EnterTime;
			}
			set
			{
				if ((this._EnterTime != value))
				{
					this.OnEnterTimeChanging(value);
					this.SendPropertyChanging();
					this._EnterTime = value;
					this.SendPropertyChanged("EnterTime");
					this.OnEnterTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExitTime
		{
			get
			{
				return this._ExitTime;
			}
			set
			{
				if ((this._ExitTime != value))
				{
					this.OnExitTimeChanging(value);
					this.SendPropertyChanging();
					this._ExitTime = value;
					this.SendPropertyChanged("ExitTime");
					this.OnExitTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PassJournal", Storage="_Employee", ThisKey="EmployeeUID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.PassJournals.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.PassJournals.Add(this);
						this._EmployeeUID = value.UID;
					}
					else
					{
						this._EmployeeUID = default(System.Guid);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Card")]
	public partial class Card : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private int _Number;
		
		private System.Nullable<System.Guid> _EmployeeUID;
		
		private System.Nullable<System.Guid> _AccessTemplateUID;
		
		private System.Nullable<int> _CardType;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private bool _IsInStopList;
		
		private string _StopReason;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _PassCardTemplateUID;
		
		private string _Password;
		
		private System.Nullable<System.Guid> _DeactivationControllerUID;
		
		private EntitySet<PendingCard> _PendingCards;
		
		private EntitySet<CardDoor> _CardDoors;
		
		private EntitySet<Journal> _Journals;
		
		private EntityRef<AccessTemplate> _AccessTemplate;
		
		private EntityRef<Employee> _Employee;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnEmployeeUIDChanging(System.Nullable<System.Guid> value);
    partial void OnEmployeeUIDChanged();
    partial void OnAccessTemplateUIDChanging(System.Nullable<System.Guid> value);
    partial void OnAccessTemplateUIDChanged();
    partial void OnCardTypeChanging(System.Nullable<int> value);
    partial void OnCardTypeChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnIsInStopListChanging(bool value);
    partial void OnIsInStopListChanged();
    partial void OnStopReasonChanging(string value);
    partial void OnStopReasonChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnPassCardTemplateUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPassCardTemplateUIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDeactivationControllerUIDChanging(System.Nullable<System.Guid> value);
    partial void OnDeactivationControllerUIDChanged();
    #endregion
		
		public Card()
		{
			this._PendingCards = new EntitySet<PendingCard>(new Action<PendingCard>(this.attach_PendingCards), new Action<PendingCard>(this.detach_PendingCards));
			this._CardDoors = new EntitySet<CardDoor>(new Action<CardDoor>(this.attach_CardDoors), new Action<CardDoor>(this.detach_CardDoors));
			this._Journals = new EntitySet<Journal>(new Action<Journal>(this.attach_Journals), new Action<Journal>(this.detach_Journals));
			this._AccessTemplate = default(EntityRef<AccessTemplate>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EmployeeUID
		{
			get
			{
				return this._EmployeeUID;
			}
			set
			{
				if ((this._EmployeeUID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeUIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeUID = value;
					this.SendPropertyChanged("EmployeeUID");
					this.OnEmployeeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessTemplateUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccessTemplateUID
		{
			get
			{
				return this._AccessTemplateUID;
			}
			set
			{
				if ((this._AccessTemplateUID != value))
				{
					if (this._AccessTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessTemplateUIDChanging(value);
					this.SendPropertyChanging();
					this._AccessTemplateUID = value;
					this.SendPropertyChanged("AccessTemplateUID");
					this.OnAccessTemplateUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardType", DbType="Int")]
		public System.Nullable<int> CardType
		{
			get
			{
				return this._CardType;
			}
			set
			{
				if ((this._CardType != value))
				{
					this.OnCardTypeChanging(value);
					this.SendPropertyChanging();
					this._CardType = value;
					this.SendPropertyChanged("CardType");
					this.OnCardTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInStopList", DbType="Bit NOT NULL")]
		public bool IsInStopList
		{
			get
			{
				return this._IsInStopList;
			}
			set
			{
				if ((this._IsInStopList != value))
				{
					this.OnIsInStopListChanging(value);
					this.SendPropertyChanging();
					this._IsInStopList = value;
					this.SendPropertyChanged("IsInStopList");
					this.OnIsInStopListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StopReason", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string StopReason
		{
			get
			{
				return this._StopReason;
			}
			set
			{
				if ((this._StopReason != value))
				{
					this.OnStopReasonChanging(value);
					this.SendPropertyChanging();
					this._StopReason = value;
					this.SendPropertyChanged("StopReason");
					this.OnStopReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassCardTemplateUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PassCardTemplateUID
		{
			get
			{
				return this._PassCardTemplateUID;
			}
			set
			{
				if ((this._PassCardTemplateUID != value))
				{
					this.OnPassCardTemplateUIDChanging(value);
					this.SendPropertyChanging();
					this._PassCardTemplateUID = value;
					this.SendPropertyChanged("PassCardTemplateUID");
					this.OnPassCardTemplateUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeactivationControllerUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeactivationControllerUID
		{
			get
			{
				return this._DeactivationControllerUID;
			}
			set
			{
				if ((this._DeactivationControllerUID != value))
				{
					this.OnDeactivationControllerUIDChanging(value);
					this.SendPropertyChanging();
					this._DeactivationControllerUID = value;
					this.SendPropertyChanged("DeactivationControllerUID");
					this.OnDeactivationControllerUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_PendingCard", Storage="_PendingCards", ThisKey="UID", OtherKey="CardUID")]
		public EntitySet<PendingCard> PendingCards
		{
			get
			{
				return this._PendingCards;
			}
			set
			{
				this._PendingCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_CardDoor", Storage="_CardDoors", ThisKey="UID", OtherKey="ParentUID")]
		public EntitySet<CardDoor> CardDoors
		{
			get
			{
				return this._CardDoors;
			}
			set
			{
				this._CardDoors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_Journal", Storage="_Journals", ThisKey="UID", OtherKey="ObjectUID")]
		public EntitySet<Journal> Journals
		{
			get
			{
				return this._Journals;
			}
			set
			{
				this._Journals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessTemplate_Card", Storage="_AccessTemplate", ThisKey="AccessTemplateUID", OtherKey="UID", IsForeignKey=true)]
		public AccessTemplate AccessTemplate
		{
			get
			{
				return this._AccessTemplate.Entity;
			}
			set
			{
				AccessTemplate previousValue = this._AccessTemplate.Entity;
				if (((previousValue != value) 
							|| (this._AccessTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessTemplate.Entity = null;
						previousValue.Cards.Remove(this);
					}
					this._AccessTemplate.Entity = value;
					if ((value != null))
					{
						value.Cards.Add(this);
						this._AccessTemplateUID = value.UID;
					}
					else
					{
						this._AccessTemplateUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("AccessTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Card", Storage="_Employee", ThisKey="EmployeeUID", OtherKey="UID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Cards.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Cards.Add(this);
						this._EmployeeUID = value.UID;
					}
					else
					{
						this._EmployeeUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PendingCards(PendingCard entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_PendingCards(PendingCard entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
		
		private void attach_CardDoors(CardDoor entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_CardDoors(CardDoor entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
		
		private void attach_Journals(Journal entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_Journals(Journal entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
	}
}
#pragma warning restore 1591
