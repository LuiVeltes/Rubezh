#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SKDDriver.DataAccess
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SKUD")]
	public partial class SKDDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccessTemplate(AccessTemplate instance);
    partial void UpdateAccessTemplate(AccessTemplate instance);
    partial void DeleteAccessTemplate(AccessTemplate instance);
    partial void InsertScheduleZoneLink(ScheduleZoneLink instance);
    partial void UpdateScheduleZoneLink(ScheduleZoneLink instance);
    partial void DeleteScheduleZoneLink(ScheduleZoneLink instance);
    partial void InsertAdditionalColumn(AdditionalColumn instance);
    partial void UpdateAdditionalColumn(AdditionalColumn instance);
    partial void DeleteAdditionalColumn(AdditionalColumn instance);
    partial void InsertAdditionalColumnType(AdditionalColumnType instance);
    partial void UpdateAdditionalColumnType(AdditionalColumnType instance);
    partial void DeleteAdditionalColumnType(AdditionalColumnType instance);
    partial void InsertCard(Card instance);
    partial void UpdateCard(Card instance);
    partial void DeleteCard(Card instance);
    partial void InsertCardZoneLink(CardZoneLink instance);
    partial void UpdateCardZoneLink(CardZoneLink instance);
    partial void DeleteCardZoneLink(CardZoneLink instance);
    partial void InsertDay(Day instance);
    partial void UpdateDay(Day instance);
    partial void DeleteDay(Day instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEmployeeReplacement(EmployeeReplacement instance);
    partial void UpdateEmployeeReplacement(EmployeeReplacement instance);
    partial void DeleteEmployeeReplacement(EmployeeReplacement instance);
    partial void InsertHoliday(Holiday instance);
    partial void UpdateHoliday(Holiday instance);
    partial void DeleteHoliday(Holiday instance);
    partial void InsertInterval(Interval instance);
    partial void UpdateInterval(Interval instance);
    partial void DeleteInterval(Interval instance);
    partial void InsertJournal(Journal instance);
    partial void UpdateJournal(Journal instance);
    partial void DeleteJournal(Journal instance);
    partial void InsertNamedInterval(NamedInterval instance);
    partial void UpdateNamedInterval(NamedInterval instance);
    partial void DeleteNamedInterval(NamedInterval instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertOrganizationZone(OrganizationZone instance);
    partial void UpdateOrganizationZone(OrganizationZone instance);
    partial void DeleteOrganizationZone(OrganizationZone instance);
    partial void InsertPassJournal(PassJournal instance);
    partial void UpdatePassJournal(PassJournal instance);
    partial void DeletePassJournal(PassJournal instance);
    partial void InsertPhone(Phone instance);
    partial void UpdatePhone(Phone instance);
    partial void DeletePhone(Phone instance);
    partial void InsertPhoto(Photo instance);
    partial void UpdatePhoto(Photo instance);
    partial void DeletePhoto(Photo instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertScheduleScheme(ScheduleScheme instance);
    partial void UpdateScheduleScheme(ScheduleScheme instance);
    partial void DeleteScheduleScheme(ScheduleScheme instance);
    #endregion
		
		public SKDDataContext() : 
				base(global::SKDDriver.Properties.Settings.Default.SKUDConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SKDDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SKDDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SKDDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SKDDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccessTemplate> AccessTemplates
		{
			get
			{
				return this.GetTable<AccessTemplate>();
			}
		}
		
		public System.Data.Linq.Table<ScheduleZoneLink> ScheduleZoneLinks
		{
			get
			{
				return this.GetTable<ScheduleZoneLink>();
			}
		}
		
		public System.Data.Linq.Table<AdditionalColumn> AdditionalColumns
		{
			get
			{
				return this.GetTable<AdditionalColumn>();
			}
		}
		
		public System.Data.Linq.Table<AdditionalColumnType> AdditionalColumnTypes
		{
			get
			{
				return this.GetTable<AdditionalColumnType>();
			}
		}
		
		public System.Data.Linq.Table<Card> Cards
		{
			get
			{
				return this.GetTable<Card>();
			}
		}
		
		public System.Data.Linq.Table<CardZoneLink> CardZoneLinks
		{
			get
			{
				return this.GetTable<CardZoneLink>();
			}
		}
		
		public System.Data.Linq.Table<Day> Days
		{
			get
			{
				return this.GetTable<Day>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeReplacement> EmployeeReplacements
		{
			get
			{
				return this.GetTable<EmployeeReplacement>();
			}
		}
		
		public System.Data.Linq.Table<Holiday> Holidays
		{
			get
			{
				return this.GetTable<Holiday>();
			}
		}
		
		public System.Data.Linq.Table<Interval> Intervals
		{
			get
			{
				return this.GetTable<Interval>();
			}
		}
		
		public System.Data.Linq.Table<Journal> Journals
		{
			get
			{
				return this.GetTable<Journal>();
			}
		}
		
		public System.Data.Linq.Table<NamedInterval> NamedIntervals
		{
			get
			{
				return this.GetTable<NamedInterval>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<OrganizationZone> OrganizationZones
		{
			get
			{
				return this.GetTable<OrganizationZone>();
			}
		}
		
		public System.Data.Linq.Table<PassJournal> PassJournals
		{
			get
			{
				return this.GetTable<PassJournal>();
			}
		}
		
		public System.Data.Linq.Table<Phone> Phones
		{
			get
			{
				return this.GetTable<Phone>();
			}
		}
		
		public System.Data.Linq.Table<Photo> Photos
		{
			get
			{
				return this.GetTable<Photo>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedules
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<ScheduleScheme> ScheduleSchemes
		{
			get
			{
				return this.GetTable<ScheduleScheme>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessTemplate")]
	public partial class AccessTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganizationUID;
		
		private EntitySet<Card> _Cards;
		
		private EntitySet<CardZoneLink> _CardZoneLinks;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganizationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationUIDChanged();
    #endregion
		
		public AccessTemplate()
		{
			this._Cards = new EntitySet<Card>(new Action<Card>(this.attach_Cards), new Action<Card>(this.detach_Cards));
			this._CardZoneLinks = new EntitySet<CardZoneLink>(new Action<CardZoneLink>(this.attach_CardZoneLinks), new Action<CardZoneLink>(this.detach_CardZoneLinks));
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessTemplate_Card", Storage="_Cards", ThisKey="UID", OtherKey="AccessTemplateUID")]
		public EntitySet<Card> Cards
		{
			get
			{
				return this._Cards;
			}
			set
			{
				this._Cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessTemplate_CardZoneLink", Storage="_CardZoneLinks", ThisKey="UID", OtherKey="ParentUID")]
		public EntitySet<CardZoneLink> CardZoneLinks
		{
			get
			{
				return this._CardZoneLinks;
			}
			set
			{
				this._CardZoneLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_AccessTemplate", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.AccessTemplates.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.AccessTemplates.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.AccessTemplate = this;
		}
		
		private void detach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.AccessTemplate = null;
		}
		
		private void attach_CardZoneLinks(CardZoneLink entity)
		{
			this.SendPropertyChanging();
			entity.AccessTemplate = this;
		}
		
		private void detach_CardZoneLinks(CardZoneLink entity)
		{
			this.SendPropertyChanging();
			entity.AccessTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScheduleZoneLink")]
	public partial class ScheduleZoneLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Nullable<System.Guid> _ZoneUID;
		
		private System.Nullable<System.Guid> _ScheduleUID;
		
		private bool _IsControl;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private EntityRef<Schedule> _Schedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnZoneUIDChanging(System.Nullable<System.Guid> value);
    partial void OnZoneUIDChanged();
    partial void OnScheduleUIDChanging(System.Nullable<System.Guid> value);
    partial void OnScheduleUIDChanged();
    partial void OnIsControlChanging(bool value);
    partial void OnIsControlChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    #endregion
		
		public ScheduleZoneLink()
		{
			this._Schedule = default(EntityRef<Schedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ZoneUID
		{
			get
			{
				return this._ZoneUID;
			}
			set
			{
				if ((this._ZoneUID != value))
				{
					this.OnZoneUIDChanging(value);
					this.SendPropertyChanging();
					this._ZoneUID = value;
					this.SendPropertyChanged("ZoneUID");
					this.OnZoneUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ScheduleUID
		{
			get
			{
				return this._ScheduleUID;
			}
			set
			{
				if ((this._ScheduleUID != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleUIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleUID = value;
					this.SendPropertyChanged("ScheduleUID");
					this.OnScheduleUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsControl", DbType="Bit NOT NULL")]
		public bool IsControl
		{
			get
			{
				return this._IsControl;
			}
			set
			{
				if ((this._IsControl != value))
				{
					this.OnIsControlChanging(value);
					this.SendPropertyChanging();
					this._IsControl = value;
					this.SendPropertyChanged("IsControl");
					this.OnIsControlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_ScheduleZoneLink", Storage="_Schedule", ThisKey="ScheduleUID", OtherKey="UID", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.ScheduleZoneLinks.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.ScheduleZoneLinks.Add(this);
						this._ScheduleUID = value.UID;
					}
					else
					{
						this._ScheduleUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdditionalColumn")]
	public partial class AdditionalColumn : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Nullable<System.Guid> _EmployeeUID;
		
		private System.Nullable<System.Guid> _AdditionalColumnTypeUID;
		
		private string _TextData;
		
		private System.Nullable<System.Guid> _PhotoUID;
		
		private EntityRef<AdditionalColumnType> _AdditionalColumnType;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnEmployeeUIDChanging(System.Nullable<System.Guid> value);
    partial void OnEmployeeUIDChanged();
    partial void OnAdditionalColumnTypeUIDChanging(System.Nullable<System.Guid> value);
    partial void OnAdditionalColumnTypeUIDChanged();
    partial void OnTextDataChanging(string value);
    partial void OnTextDataChanged();
    partial void OnPhotoUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhotoUIDChanged();
    #endregion
		
		public AdditionalColumn()
		{
			this._AdditionalColumnType = default(EntityRef<AdditionalColumnType>);
			this._Employee = default(EntityRef<Employee>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EmployeeUID
		{
			get
			{
				return this._EmployeeUID;
			}
			set
			{
				if ((this._EmployeeUID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeUIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeUID = value;
					this.SendPropertyChanged("EmployeeUID");
					this.OnEmployeeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdditionalColumnTypeUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AdditionalColumnTypeUID
		{
			get
			{
				return this._AdditionalColumnTypeUID;
			}
			set
			{
				if ((this._AdditionalColumnTypeUID != value))
				{
					if (this._AdditionalColumnType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdditionalColumnTypeUIDChanging(value);
					this.SendPropertyChanging();
					this._AdditionalColumnTypeUID = value;
					this.SendPropertyChanged("AdditionalColumnTypeUID");
					this.OnAdditionalColumnTypeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextData", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TextData
		{
			get
			{
				return this._TextData;
			}
			set
			{
				if ((this._TextData != value))
				{
					this.OnTextDataChanging(value);
					this.SendPropertyChanging();
					this._TextData = value;
					this.SendPropertyChanged("TextData");
					this.OnTextDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhotoUID
		{
			get
			{
				return this._PhotoUID;
			}
			set
			{
				if ((this._PhotoUID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoUIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoUID = value;
					this.SendPropertyChanged("PhotoUID");
					this.OnPhotoUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdditionalColumnType_AdditionalColumn", Storage="_AdditionalColumnType", ThisKey="AdditionalColumnTypeUID", OtherKey="UID", IsForeignKey=true)]
		public AdditionalColumnType AdditionalColumnType
		{
			get
			{
				return this._AdditionalColumnType.Entity;
			}
			set
			{
				AdditionalColumnType previousValue = this._AdditionalColumnType.Entity;
				if (((previousValue != value) 
							|| (this._AdditionalColumnType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AdditionalColumnType.Entity = null;
						previousValue.AdditionalColumns.Remove(this);
					}
					this._AdditionalColumnType.Entity = value;
					if ((value != null))
					{
						value.AdditionalColumns.Add(this);
						this._AdditionalColumnTypeUID = value.UID;
					}
					else
					{
						this._AdditionalColumnTypeUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("AdditionalColumnType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AdditionalColumn", Storage="_Employee", ThisKey="EmployeeUID", OtherKey="UID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.AdditionalColumns.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.AdditionalColumns.Add(this);
						this._EmployeeUID = value.UID;
					}
					else
					{
						this._EmployeeUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_AdditionalColumn", Storage="_Photo", ThisKey="PhotoUID", OtherKey="UID", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.AdditionalColumns.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.AdditionalColumns.Add(this);
						this._PhotoUID = value.UID;
					}
					else
					{
						this._PhotoUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdditionalColumnType")]
	public partial class AdditionalColumnType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _DataType;
		
		private System.Nullable<int> _PersonType;
		
		private System.Nullable<System.Guid> _OrganizationUID;
		
		private System.Nullable<bool> _IsInGrid;
		
		private EntitySet<AdditionalColumn> _AdditionalColumns;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDataTypeChanging(System.Nullable<int> value);
    partial void OnDataTypeChanged();
    partial void OnPersonTypeChanging(System.Nullable<int> value);
    partial void OnPersonTypeChanged();
    partial void OnOrganizationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationUIDChanged();
    partial void OnIsInGridChanging(System.Nullable<bool> value);
    partial void OnIsInGridChanged();
    #endregion
		
		public AdditionalColumnType()
		{
			this._AdditionalColumns = new EntitySet<AdditionalColumn>(new Action<AdditionalColumn>(this.attach_AdditionalColumns), new Action<AdditionalColumn>(this.detach_AdditionalColumns));
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataType", DbType="Int")]
		public System.Nullable<int> DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonType", DbType="Int")]
		public System.Nullable<int> PersonType
		{
			get
			{
				return this._PersonType;
			}
			set
			{
				if ((this._PersonType != value))
				{
					this.OnPersonTypeChanging(value);
					this.SendPropertyChanging();
					this._PersonType = value;
					this.SendPropertyChanged("PersonType");
					this.OnPersonTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInGrid", DbType="Bit")]
		public System.Nullable<bool> IsInGrid
		{
			get
			{
				return this._IsInGrid;
			}
			set
			{
				if ((this._IsInGrid != value))
				{
					this.OnIsInGridChanging(value);
					this.SendPropertyChanging();
					this._IsInGrid = value;
					this.SendPropertyChanged("IsInGrid");
					this.OnIsInGridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AdditionalColumnType_AdditionalColumn", Storage="_AdditionalColumns", ThisKey="UID", OtherKey="AdditionalColumnTypeUID")]
		public EntitySet<AdditionalColumn> AdditionalColumns
		{
			get
			{
				return this._AdditionalColumns;
			}
			set
			{
				this._AdditionalColumns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_AdditionalColumnType", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.AdditionalColumnTypes.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.AdditionalColumnTypes.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdditionalColumns(AdditionalColumn entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalColumnType = this;
		}
		
		private void detach_AdditionalColumns(AdditionalColumn entity)
		{
			this.SendPropertyChanging();
			entity.AdditionalColumnType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Card")]
	public partial class Card : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private int _Series;
		
		private int _Number;
		
		private System.Nullable<System.Guid> _EmployeeUID;
		
		private System.Nullable<System.Guid> _AccessTemplateUID;
		
		private System.Nullable<int> _CardType;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private bool _IsInStopList;
		
		private string _StopReason;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _CardTemplateUID;
		
		private EntitySet<CardZoneLink> _CardZoneLinks;
		
		private EntitySet<Journal> _Journals;
		
		private EntityRef<AccessTemplate> _AccessTemplate;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnSeriesChanging(int value);
    partial void OnSeriesChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnEmployeeUIDChanging(System.Nullable<System.Guid> value);
    partial void OnEmployeeUIDChanged();
    partial void OnAccessTemplateUIDChanging(System.Nullable<System.Guid> value);
    partial void OnAccessTemplateUIDChanged();
    partial void OnCardTypeChanging(System.Nullable<int> value);
    partial void OnCardTypeChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnIsInStopListChanging(bool value);
    partial void OnIsInStopListChanged();
    partial void OnStopReasonChanging(string value);
    partial void OnStopReasonChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnCardTemplateUIDChanging(System.Nullable<System.Guid> value);
    partial void OnCardTemplateUIDChanged();
    #endregion
		
		public Card()
		{
			this._CardZoneLinks = new EntitySet<CardZoneLink>(new Action<CardZoneLink>(this.attach_CardZoneLinks), new Action<CardZoneLink>(this.detach_CardZoneLinks));
			this._Journals = new EntitySet<Journal>(new Action<Journal>(this.attach_Journals), new Action<Journal>(this.detach_Journals));
			this._AccessTemplate = default(EntityRef<AccessTemplate>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Series", DbType="Int NOT NULL")]
		public int Series
		{
			get
			{
				return this._Series;
			}
			set
			{
				if ((this._Series != value))
				{
					this.OnSeriesChanging(value);
					this.SendPropertyChanging();
					this._Series = value;
					this.SendPropertyChanged("Series");
					this.OnSeriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EmployeeUID
		{
			get
			{
				return this._EmployeeUID;
			}
			set
			{
				if ((this._EmployeeUID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeUIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeUID = value;
					this.SendPropertyChanged("EmployeeUID");
					this.OnEmployeeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessTemplateUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AccessTemplateUID
		{
			get
			{
				return this._AccessTemplateUID;
			}
			set
			{
				if ((this._AccessTemplateUID != value))
				{
					if (this._AccessTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessTemplateUIDChanging(value);
					this.SendPropertyChanging();
					this._AccessTemplateUID = value;
					this.SendPropertyChanged("AccessTemplateUID");
					this.OnAccessTemplateUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardType", DbType="Int")]
		public System.Nullable<int> CardType
		{
			get
			{
				return this._CardType;
			}
			set
			{
				if ((this._CardType != value))
				{
					this.OnCardTypeChanging(value);
					this.SendPropertyChanging();
					this._CardType = value;
					this.SendPropertyChanged("CardType");
					this.OnCardTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInStopList", DbType="Bit NOT NULL")]
		public bool IsInStopList
		{
			get
			{
				return this._IsInStopList;
			}
			set
			{
				if ((this._IsInStopList != value))
				{
					this.OnIsInStopListChanging(value);
					this.SendPropertyChanging();
					this._IsInStopList = value;
					this.SendPropertyChanged("IsInStopList");
					this.OnIsInStopListChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StopReason", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string StopReason
		{
			get
			{
				return this._StopReason;
			}
			set
			{
				if ((this._StopReason != value))
				{
					this.OnStopReasonChanging(value);
					this.SendPropertyChanging();
					this._StopReason = value;
					this.SendPropertyChanged("StopReason");
					this.OnStopReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardTemplateUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CardTemplateUID
		{
			get
			{
				return this._CardTemplateUID;
			}
			set
			{
				if ((this._CardTemplateUID != value))
				{
					this.OnCardTemplateUIDChanging(value);
					this.SendPropertyChanging();
					this._CardTemplateUID = value;
					this.SendPropertyChanged("CardTemplateUID");
					this.OnCardTemplateUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_CardZoneLink", Storage="_CardZoneLinks", ThisKey="UID", OtherKey="ParentUID")]
		public EntitySet<CardZoneLink> CardZoneLinks
		{
			get
			{
				return this._CardZoneLinks;
			}
			set
			{
				this._CardZoneLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_Journal", Storage="_Journals", ThisKey="UID", OtherKey="CardUID")]
		public EntitySet<Journal> Journals
		{
			get
			{
				return this._Journals;
			}
			set
			{
				this._Journals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessTemplate_Card", Storage="_AccessTemplate", ThisKey="AccessTemplateUID", OtherKey="UID", IsForeignKey=true)]
		public AccessTemplate AccessTemplate
		{
			get
			{
				return this._AccessTemplate.Entity;
			}
			set
			{
				AccessTemplate previousValue = this._AccessTemplate.Entity;
				if (((previousValue != value) 
							|| (this._AccessTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessTemplate.Entity = null;
						previousValue.Cards.Remove(this);
					}
					this._AccessTemplate.Entity = value;
					if ((value != null))
					{
						value.Cards.Add(this);
						this._AccessTemplateUID = value.UID;
					}
					else
					{
						this._AccessTemplateUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("AccessTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Card", Storage="_Employee", ThisKey="EmployeeUID", OtherKey="UID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Cards.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Cards.Add(this);
						this._EmployeeUID = value.UID;
					}
					else
					{
						this._EmployeeUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CardZoneLinks(CardZoneLink entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_CardZoneLinks(CardZoneLink entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
		
		private void attach_Journals(Journal entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_Journals(Journal entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CardZoneLink")]
	public partial class CardZoneLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Guid _ZoneUID;
		
		private System.Nullable<System.Guid> _ParentUID;
		
		private System.Nullable<int> _ParentType;
		
		private bool _IsWithEscort;
		
		private bool _IsAntipass;
		
		private System.Nullable<System.Guid> _IntervalUID;
		
		private System.Nullable<int> _IntervalType;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private EntityRef<AccessTemplate> _AccessTemplate;
		
		private EntityRef<Card> _Card;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnZoneUIDChanging(System.Guid value);
    partial void OnZoneUIDChanged();
    partial void OnParentUIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentUIDChanged();
    partial void OnParentTypeChanging(System.Nullable<int> value);
    partial void OnParentTypeChanged();
    partial void OnIsWithEscortChanging(bool value);
    partial void OnIsWithEscortChanged();
    partial void OnIsAntipassChanging(bool value);
    partial void OnIsAntipassChanged();
    partial void OnIntervalUIDChanging(System.Nullable<System.Guid> value);
    partial void OnIntervalUIDChanged();
    partial void OnIntervalTypeChanging(System.Nullable<int> value);
    partial void OnIntervalTypeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    #endregion
		
		public CardZoneLink()
		{
			this._AccessTemplate = default(EntityRef<AccessTemplate>);
			this._Card = default(EntityRef<Card>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ZoneUID
		{
			get
			{
				return this._ZoneUID;
			}
			set
			{
				if ((this._ZoneUID != value))
				{
					this.OnZoneUIDChanging(value);
					this.SendPropertyChanging();
					this._ZoneUID = value;
					this.SendPropertyChanged("ZoneUID");
					this.OnZoneUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentUID
		{
			get
			{
				return this._ParentUID;
			}
			set
			{
				if ((this._ParentUID != value))
				{
					if ((this._AccessTemplate.HasLoadedOrAssignedValue || this._Card.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentUID = value;
					this.SendPropertyChanged("ParentUID");
					this.OnParentUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentType", DbType="Int")]
		public System.Nullable<int> ParentType
		{
			get
			{
				return this._ParentType;
			}
			set
			{
				if ((this._ParentType != value))
				{
					this.OnParentTypeChanging(value);
					this.SendPropertyChanging();
					this._ParentType = value;
					this.SendPropertyChanged("ParentType");
					this.OnParentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsWithEscort", DbType="Bit NOT NULL")]
		public bool IsWithEscort
		{
			get
			{
				return this._IsWithEscort;
			}
			set
			{
				if ((this._IsWithEscort != value))
				{
					this.OnIsWithEscortChanging(value);
					this.SendPropertyChanging();
					this._IsWithEscort = value;
					this.SendPropertyChanged("IsWithEscort");
					this.OnIsWithEscortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAntipass", DbType="Bit NOT NULL")]
		public bool IsAntipass
		{
			get
			{
				return this._IsAntipass;
			}
			set
			{
				if ((this._IsAntipass != value))
				{
					this.OnIsAntipassChanging(value);
					this.SendPropertyChanging();
					this._IsAntipass = value;
					this.SendPropertyChanged("IsAntipass");
					this.OnIsAntipassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntervalUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IntervalUID
		{
			get
			{
				return this._IntervalUID;
			}
			set
			{
				if ((this._IntervalUID != value))
				{
					this.OnIntervalUIDChanging(value);
					this.SendPropertyChanging();
					this._IntervalUID = value;
					this.SendPropertyChanged("IntervalUID");
					this.OnIntervalUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntervalType", DbType="Int")]
		public System.Nullable<int> IntervalType
		{
			get
			{
				return this._IntervalType;
			}
			set
			{
				if ((this._IntervalType != value))
				{
					this.OnIntervalTypeChanging(value);
					this.SendPropertyChanging();
					this._IntervalType = value;
					this.SendPropertyChanged("IntervalType");
					this.OnIntervalTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessTemplate_CardZoneLink", Storage="_AccessTemplate", ThisKey="ParentUID", OtherKey="UID", IsForeignKey=true)]
		public AccessTemplate AccessTemplate
		{
			get
			{
				return this._AccessTemplate.Entity;
			}
			set
			{
				AccessTemplate previousValue = this._AccessTemplate.Entity;
				if (((previousValue != value) 
							|| (this._AccessTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessTemplate.Entity = null;
						previousValue.CardZoneLinks.Remove(this);
					}
					this._AccessTemplate.Entity = value;
					if ((value != null))
					{
						value.CardZoneLinks.Add(this);
						this._ParentUID = value.UID;
					}
					else
					{
						this._ParentUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("AccessTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_CardZoneLink", Storage="_Card", ThisKey="ParentUID", OtherKey="UID", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.CardZoneLinks.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.CardZoneLinks.Add(this);
						this._ParentUID = value.UID;
					}
					else
					{
						this._ParentUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Day")]
	public partial class Day : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Nullable<System.Guid> _NamedIntervalUID;
		
		private System.Guid _ScheduleSchemeUID;
		
		private int _Number;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private EntityRef<NamedInterval> _NamedInterval;
		
		private EntityRef<ScheduleScheme> _ScheduleScheme;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNamedIntervalUIDChanging(System.Nullable<System.Guid> value);
    partial void OnNamedIntervalUIDChanged();
    partial void OnScheduleSchemeUIDChanging(System.Guid value);
    partial void OnScheduleSchemeUIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    #endregion
		
		public Day()
		{
			this._NamedInterval = default(EntityRef<NamedInterval>);
			this._ScheduleScheme = default(EntityRef<ScheduleScheme>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NamedIntervalUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NamedIntervalUID
		{
			get
			{
				return this._NamedIntervalUID;
			}
			set
			{
				if ((this._NamedIntervalUID != value))
				{
					if (this._NamedInterval.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNamedIntervalUIDChanging(value);
					this.SendPropertyChanging();
					this._NamedIntervalUID = value;
					this.SendPropertyChanged("NamedIntervalUID");
					this.OnNamedIntervalUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleSchemeUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ScheduleSchemeUID
		{
			get
			{
				return this._ScheduleSchemeUID;
			}
			set
			{
				if ((this._ScheduleSchemeUID != value))
				{
					if (this._ScheduleScheme.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleSchemeUIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleSchemeUID = value;
					this.SendPropertyChanged("ScheduleSchemeUID");
					this.OnScheduleSchemeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedInterval_Day", Storage="_NamedInterval", ThisKey="NamedIntervalUID", OtherKey="UID", IsForeignKey=true)]
		public NamedInterval NamedInterval
		{
			get
			{
				return this._NamedInterval.Entity;
			}
			set
			{
				NamedInterval previousValue = this._NamedInterval.Entity;
				if (((previousValue != value) 
							|| (this._NamedInterval.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NamedInterval.Entity = null;
						previousValue.Days.Remove(this);
					}
					this._NamedInterval.Entity = value;
					if ((value != null))
					{
						value.Days.Add(this);
						this._NamedIntervalUID = value.UID;
					}
					else
					{
						this._NamedIntervalUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("NamedInterval");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleScheme_Day", Storage="_ScheduleScheme", ThisKey="ScheduleSchemeUID", OtherKey="UID", IsForeignKey=true)]
		public ScheduleScheme ScheduleScheme
		{
			get
			{
				return this._ScheduleScheme.Entity;
			}
			set
			{
				ScheduleScheme previousValue = this._ScheduleScheme.Entity;
				if (((previousValue != value) 
							|| (this._ScheduleScheme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScheduleScheme.Entity = null;
						previousValue.Days.Remove(this);
					}
					this._ScheduleScheme.Entity = value;
					if ((value != null))
					{
						value.Days.Add(this);
						this._ScheduleSchemeUID = value.UID;
					}
					else
					{
						this._ScheduleSchemeUID = default(System.Guid);
					}
					this.SendPropertyChanged("ScheduleScheme");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _PhotoUID;
		
		private System.Nullable<System.Guid> _ParentDepartmentUID;
		
		private System.Nullable<System.Guid> _ContactEmployeeUID;
		
		private System.Nullable<System.Guid> _AttendantUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganizationUID;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<EmployeeReplacement> _EmployeeReplacements;
		
		private EntitySet<Phone> _Phones;
		
		private EntityRef<Department> _Department1;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPhotoUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhotoUIDChanged();
    partial void OnParentDepartmentUIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentDepartmentUIDChanged();
    partial void OnContactEmployeeUIDChanging(System.Nullable<System.Guid> value);
    partial void OnContactEmployeeUIDChanged();
    partial void OnAttendantUIDChanging(System.Nullable<System.Guid> value);
    partial void OnAttendantUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganizationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationUIDChanged();
    #endregion
		
		public Department()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._EmployeeReplacements = new EntitySet<EmployeeReplacement>(new Action<EmployeeReplacement>(this.attach_EmployeeReplacements), new Action<EmployeeReplacement>(this.detach_EmployeeReplacements));
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			this._Department1 = default(EntityRef<Department>);
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			this._Organization = default(EntityRef<Organization>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhotoUID
		{
			get
			{
				return this._PhotoUID;
			}
			set
			{
				if ((this._PhotoUID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoUIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoUID = value;
					this.SendPropertyChanged("PhotoUID");
					this.OnPhotoUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentDepartmentUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentDepartmentUID
		{
			get
			{
				return this._ParentDepartmentUID;
			}
			set
			{
				if ((this._ParentDepartmentUID != value))
				{
					if (this._Department1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentDepartmentUIDChanging(value);
					this.SendPropertyChanging();
					this._ParentDepartmentUID = value;
					this.SendPropertyChanged("ParentDepartmentUID");
					this.OnParentDepartmentUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactEmployeeUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ContactEmployeeUID
		{
			get
			{
				return this._ContactEmployeeUID;
			}
			set
			{
				if ((this._ContactEmployeeUID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactEmployeeUIDChanging(value);
					this.SendPropertyChanging();
					this._ContactEmployeeUID = value;
					this.SendPropertyChanged("ContactEmployeeUID");
					this.OnContactEmployeeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttendantUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AttendantUID
		{
			get
			{
				return this._AttendantUID;
			}
			set
			{
				if ((this._AttendantUID != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttendantUIDChanging(value);
					this.SendPropertyChanging();
					this._AttendantUID = value;
					this.SendPropertyChanged("AttendantUID");
					this.OnAttendantUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Department", Storage="_Departments", ThisKey="UID", OtherKey="ParentDepartmentUID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Employees", ThisKey="UID", OtherKey="DepartmentUID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_EmployeeReplacement", Storage="_EmployeeReplacements", ThisKey="UID", OtherKey="DepartmentUID")]
		public EntitySet<EmployeeReplacement> EmployeeReplacements
		{
			get
			{
				return this._EmployeeReplacements;
			}
			set
			{
				this._EmployeeReplacements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Phone", Storage="_Phones", ThisKey="UID", OtherKey="DepartmentUID")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Department", Storage="_Department1", ThisKey="ParentDepartmentUID", OtherKey="UID", IsForeignKey=true)]
		public Department Department1
		{
			get
			{
				return this._Department1.Entity;
			}
			set
			{
				Department previousValue = this._Department1.Entity;
				if (((previousValue != value) 
							|| (this._Department1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department1.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Department1.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._ParentDepartmentUID = value.UID;
					}
					else
					{
						this._ParentDepartmentUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Department1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Department", Storage="_Employee", ThisKey="ContactEmployeeUID", OtherKey="UID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._ContactEmployeeUID = value.UID;
					}
					else
					{
						this._ContactEmployeeUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Department1", Storage="_Employee1", ThisKey="AttendantUID", OtherKey="UID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Departments1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Departments1.Add(this);
						this._AttendantUID = value.UID;
					}
					else
					{
						this._AttendantUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Department", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Department", Storage="_Photo", ThisKey="PhotoUID", OtherKey="UID", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._PhotoUID = value.UID;
					}
					else
					{
						this._PhotoUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Department1 = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_EmployeeReplacements(EmployeeReplacement entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_EmployeeReplacements(EmployeeReplacement entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Document")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private int _No;
		
		private string _Name;
		
		private string _Description;
		
		private System.DateTime _IssueDate;
		
		private System.DateTime _LaunchDate;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganizationUID;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNoChanging(int value);
    partial void OnNoChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIssueDateChanging(System.DateTime value);
    partial void OnIssueDateChanged();
    partial void OnLaunchDateChanging(System.DateTime value);
    partial void OnLaunchDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganizationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationUIDChanged();
    #endregion
		
		public Document()
		{
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int NOT NULL")]
		public int No
		{
			get
			{
				return this._No;
			}
			set
			{
				if ((this._No != value))
				{
					this.OnNoChanging(value);
					this.SendPropertyChanging();
					this._No = value;
					this.SendPropertyChanged("No");
					this.OnNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="DateTime NOT NULL")]
		public System.DateTime IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LaunchDate", DbType="DateTime NOT NULL")]
		public System.DateTime LaunchDate
		{
			get
			{
				return this._LaunchDate;
			}
			set
			{
				if ((this._LaunchDate != value))
				{
					this.OnLaunchDateChanging(value);
					this.SendPropertyChanging();
					this._LaunchDate = value;
					this.SendPropertyChanged("LaunchDate");
					this.OnLaunchDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Document", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _FirstName;
		
		private string _SecondName;
		
		private string _LastName;
		
		private System.Nullable<System.Guid> _PhotoUID;
		
		private System.Nullable<System.Guid> _PositionUID;
		
		private System.Nullable<System.Guid> _DepartmentUID;
		
		private System.Nullable<System.Guid> _ScheduleUID;
		
		private System.DateTime _Appointed;
		
		private System.DateTime _Dismissed;
		
		private System.Nullable<int> _Type;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganizationUID;
		
		private EntitySet<AdditionalColumn> _AdditionalColumns;
		
		private EntitySet<Card> _Cards;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Department> _Departments1;
		
		private EntitySet<EmployeeReplacement> _EmployeeReplacements;
		
		private EntitySet<PassJournal> _PassJournals;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<Photo> _Photo;
		
		private EntityRef<Position> _Position;
		
		private EntityRef<Schedule> _Schedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSecondNameChanging(string value);
    partial void OnSecondNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhotoUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhotoUIDChanged();
    partial void OnPositionUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPositionUIDChanged();
    partial void OnDepartmentUIDChanging(System.Nullable<System.Guid> value);
    partial void OnDepartmentUIDChanged();
    partial void OnScheduleUIDChanging(System.Nullable<System.Guid> value);
    partial void OnScheduleUIDChanged();
    partial void OnAppointedChanging(System.DateTime value);
    partial void OnAppointedChanged();
    partial void OnDismissedChanging(System.DateTime value);
    partial void OnDismissedChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganizationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationUIDChanged();
    #endregion
		
		public Employee()
		{
			this._AdditionalColumns = new EntitySet<AdditionalColumn>(new Action<AdditionalColumn>(this.attach_AdditionalColumns), new Action<AdditionalColumn>(this.detach_AdditionalColumns));
			this._Cards = new EntitySet<Card>(new Action<Card>(this.attach_Cards), new Action<Card>(this.detach_Cards));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Departments1 = new EntitySet<Department>(new Action<Department>(this.attach_Departments1), new Action<Department>(this.detach_Departments1));
			this._EmployeeReplacements = new EntitySet<EmployeeReplacement>(new Action<EmployeeReplacement>(this.attach_EmployeeReplacements), new Action<EmployeeReplacement>(this.detach_EmployeeReplacements));
			this._PassJournals = new EntitySet<PassJournal>(new Action<PassJournal>(this.attach_PassJournals), new Action<PassJournal>(this.detach_PassJournals));
			this._Department = default(EntityRef<Department>);
			this._Organization = default(EntityRef<Organization>);
			this._Photo = default(EntityRef<Photo>);
			this._Position = default(EntityRef<Position>);
			this._Schedule = default(EntityRef<Schedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondName", DbType="NVarChar(50)")]
		public string SecondName
		{
			get
			{
				return this._SecondName;
			}
			set
			{
				if ((this._SecondName != value))
				{
					this.OnSecondNameChanging(value);
					this.SendPropertyChanging();
					this._SecondName = value;
					this.SendPropertyChanged("SecondName");
					this.OnSecondNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhotoUID
		{
			get
			{
				return this._PhotoUID;
			}
			set
			{
				if ((this._PhotoUID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoUIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoUID = value;
					this.SendPropertyChanged("PhotoUID");
					this.OnPhotoUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PositionUID
		{
			get
			{
				return this._PositionUID;
			}
			set
			{
				if ((this._PositionUID != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPositionUIDChanging(value);
					this.SendPropertyChanging();
					this._PositionUID = value;
					this.SendPropertyChanged("PositionUID");
					this.OnPositionUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DepartmentUID
		{
			get
			{
				return this._DepartmentUID;
			}
			set
			{
				if ((this._DepartmentUID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentUIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentUID = value;
					this.SendPropertyChanged("DepartmentUID");
					this.OnDepartmentUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ScheduleUID
		{
			get
			{
				return this._ScheduleUID;
			}
			set
			{
				if ((this._ScheduleUID != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleUIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleUID = value;
					this.SendPropertyChanged("ScheduleUID");
					this.OnScheduleUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appointed", DbType="DateTime NOT NULL")]
		public System.DateTime Appointed
		{
			get
			{
				return this._Appointed;
			}
			set
			{
				if ((this._Appointed != value))
				{
					this.OnAppointedChanging(value);
					this.SendPropertyChanging();
					this._Appointed = value;
					this.SendPropertyChanged("Appointed");
					this.OnAppointedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dismissed", DbType="DateTime NOT NULL")]
		public System.DateTime Dismissed
		{
			get
			{
				return this._Dismissed;
			}
			set
			{
				if ((this._Dismissed != value))
				{
					this.OnDismissedChanging(value);
					this.SendPropertyChanging();
					this._Dismissed = value;
					this.SendPropertyChanged("Dismissed");
					this.OnDismissedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AdditionalColumn", Storage="_AdditionalColumns", ThisKey="UID", OtherKey="EmployeeUID")]
		public EntitySet<AdditionalColumn> AdditionalColumns
		{
			get
			{
				return this._AdditionalColumns;
			}
			set
			{
				this._AdditionalColumns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Card", Storage="_Cards", ThisKey="UID", OtherKey="EmployeeUID")]
		public EntitySet<Card> Cards
		{
			get
			{
				return this._Cards;
			}
			set
			{
				this._Cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Department", Storage="_Departments", ThisKey="UID", OtherKey="ContactEmployeeUID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Department1", Storage="_Departments1", ThisKey="UID", OtherKey="AttendantUID")]
		public EntitySet<Department> Departments1
		{
			get
			{
				return this._Departments1;
			}
			set
			{
				this._Departments1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeReplacement", Storage="_EmployeeReplacements", ThisKey="UID", OtherKey="EmployeeUID")]
		public EntitySet<EmployeeReplacement> EmployeeReplacements
		{
			get
			{
				return this._EmployeeReplacements;
			}
			set
			{
				this._EmployeeReplacements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PassJournal", Storage="_PassJournals", ThisKey="UID", OtherKey="EmployeeUID")]
		public EntitySet<PassJournal> PassJournals
		{
			get
			{
				return this._PassJournals;
			}
			set
			{
				this._PassJournals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Department", ThisKey="DepartmentUID", OtherKey="UID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._DepartmentUID = value.UID;
					}
					else
					{
						this._DepartmentUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Employee", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Employee", Storage="_Photo", ThisKey="PhotoUID", OtherKey="UID", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._PhotoUID = value.UID;
					}
					else
					{
						this._PhotoUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Employee", Storage="_Position", ThisKey="PositionUID", OtherKey="UID", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._PositionUID = value.UID;
					}
					else
					{
						this._PositionUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Employee", Storage="_Schedule", ThisKey="ScheduleUID", OtherKey="UID", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._ScheduleUID = value.UID;
					}
					else
					{
						this._ScheduleUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdditionalColumns(AdditionalColumn entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_AdditionalColumns(AdditionalColumn entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Departments1(Department entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Departments1(Department entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_EmployeeReplacements(EmployeeReplacement entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmployeeReplacements(EmployeeReplacement entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_PassJournals(PassJournal entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_PassJournals(PassJournal entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeReplacement")]
	public partial class EmployeeReplacement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.DateTime _BeginDate;
		
		private System.DateTime _EndDate;
		
		private System.Nullable<System.Guid> _EmployeeUID;
		
		private System.Nullable<System.Guid> _DepartmentUID;
		
		private System.Nullable<System.Guid> _ScheduleUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganizationUID;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<Schedule> _Schedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnEmployeeUIDChanging(System.Nullable<System.Guid> value);
    partial void OnEmployeeUIDChanged();
    partial void OnDepartmentUIDChanging(System.Nullable<System.Guid> value);
    partial void OnDepartmentUIDChanged();
    partial void OnScheduleUIDChanging(System.Nullable<System.Guid> value);
    partial void OnScheduleUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganizationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationUIDChanged();
    #endregion
		
		public EmployeeReplacement()
		{
			this._Department = default(EntityRef<Department>);
			this._Employee = default(EntityRef<Employee>);
			this._Organization = default(EntityRef<Organization>);
			this._Schedule = default(EntityRef<Schedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EmployeeUID
		{
			get
			{
				return this._EmployeeUID;
			}
			set
			{
				if ((this._EmployeeUID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeUIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeUID = value;
					this.SendPropertyChanged("EmployeeUID");
					this.OnEmployeeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DepartmentUID
		{
			get
			{
				return this._DepartmentUID;
			}
			set
			{
				if ((this._DepartmentUID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentUIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentUID = value;
					this.SendPropertyChanged("DepartmentUID");
					this.OnDepartmentUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ScheduleUID
		{
			get
			{
				return this._ScheduleUID;
			}
			set
			{
				if ((this._ScheduleUID != value))
				{
					if (this._Schedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleUIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleUID = value;
					this.SendPropertyChanged("ScheduleUID");
					this.OnScheduleUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_EmployeeReplacement", Storage="_Department", ThisKey="DepartmentUID", OtherKey="UID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.EmployeeReplacements.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.EmployeeReplacements.Add(this);
						this._DepartmentUID = value.UID;
					}
					else
					{
						this._DepartmentUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmployeeReplacement", Storage="_Employee", ThisKey="EmployeeUID", OtherKey="UID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmployeeReplacements.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmployeeReplacements.Add(this);
						this._EmployeeUID = value.UID;
					}
					else
					{
						this._EmployeeUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_EmployeeReplacement", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.EmployeeReplacements.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.EmployeeReplacements.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_EmployeeReplacement", Storage="_Schedule", ThisKey="ScheduleUID", OtherKey="UID", IsForeignKey=true)]
		public Schedule Schedule
		{
			get
			{
				return this._Schedule.Entity;
			}
			set
			{
				Schedule previousValue = this._Schedule.Entity;
				if (((previousValue != value) 
							|| (this._Schedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Schedule.Entity = null;
						previousValue.EmployeeReplacements.Remove(this);
					}
					this._Schedule.Entity = value;
					if ((value != null))
					{
						value.EmployeeReplacements.Add(this);
						this._ScheduleUID = value.UID;
					}
					else
					{
						this._ScheduleUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Schedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Holiday")]
	public partial class Holiday : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private System.Nullable<int> _Type;
		
		private System.DateTime _Date;
		
		private System.DateTime _TransferDate;
		
		private int _Reduction;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganizationUID;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTransferDateChanging(System.DateTime value);
    partial void OnTransferDateChanged();
    partial void OnReductionChanging(int value);
    partial void OnReductionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganizationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationUIDChanged();
    #endregion
		
		public Holiday()
		{
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransferDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransferDate
		{
			get
			{
				return this._TransferDate;
			}
			set
			{
				if ((this._TransferDate != value))
				{
					this.OnTransferDateChanging(value);
					this.SendPropertyChanging();
					this._TransferDate = value;
					this.SendPropertyChanged("TransferDate");
					this.OnTransferDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reduction", DbType="Int NOT NULL")]
		public int Reduction
		{
			get
			{
				return this._Reduction;
			}
			set
			{
				if ((this._Reduction != value))
				{
					this.OnReductionChanging(value);
					this.SendPropertyChanging();
					this._Reduction = value;
					this.SendPropertyChanged("Reduction");
					this.OnReductionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Holiday", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Holidays.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Holidays.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Interval")]
	public partial class Interval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _TransitionType;
		
		private int _BeginTime;
		
		private int _EndTime;
		
		private System.Guid _UID;
		
		private System.Guid _NamedIntervalUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private EntityRef<NamedInterval> _NamedInterval;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransitionTypeChanging(System.Nullable<int> value);
    partial void OnTransitionTypeChanged();
    partial void OnBeginTimeChanging(int value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(int value);
    partial void OnEndTimeChanged();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNamedIntervalUIDChanging(System.Guid value);
    partial void OnNamedIntervalUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    #endregion
		
		public Interval()
		{
			this._NamedInterval = default(EntityRef<NamedInterval>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransitionType", DbType="Int")]
		public System.Nullable<int> TransitionType
		{
			get
			{
				return this._TransitionType;
			}
			set
			{
				if ((this._TransitionType != value))
				{
					this.OnTransitionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransitionType = value;
					this.SendPropertyChanged("TransitionType");
					this.OnTransitionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginTime", DbType="Int NOT NULL")]
		public int BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Int NOT NULL")]
		public int EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NamedIntervalUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid NamedIntervalUID
		{
			get
			{
				return this._NamedIntervalUID;
			}
			set
			{
				if ((this._NamedIntervalUID != value))
				{
					if (this._NamedInterval.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNamedIntervalUIDChanging(value);
					this.SendPropertyChanging();
					this._NamedIntervalUID = value;
					this.SendPropertyChanged("NamedIntervalUID");
					this.OnNamedIntervalUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedInterval_Interval", Storage="_NamedInterval", ThisKey="NamedIntervalUID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public NamedInterval NamedInterval
		{
			get
			{
				return this._NamedInterval.Entity;
			}
			set
			{
				NamedInterval previousValue = this._NamedInterval.Entity;
				if (((previousValue != value) 
							|| (this._NamedInterval.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NamedInterval.Entity = null;
						previousValue.Intervals.Remove(this);
					}
					this._NamedInterval.Entity = value;
					if ((value != null))
					{
						value.Intervals.Add(this);
						this._NamedIntervalUID = value.UID;
					}
					else
					{
						this._NamedIntervalUID = default(System.Guid);
					}
					this.SendPropertyChanged("NamedInterval");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Journal")]
	public partial class Journal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.DateTime _SysemDate;
		
		private System.DateTime _DeviceDate;
		
		private string _Name;
		
		private string _Description;
		
		private int _DeviceNo;
		
		private string _IpPort;
		
		private System.Nullable<System.Guid> _CardUID;
		
		private int _CardSeries;
		
		private int _CardNo;
		
		private EntityRef<Card> _Card;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnSysemDateChanging(System.DateTime value);
    partial void OnSysemDateChanged();
    partial void OnDeviceDateChanging(System.DateTime value);
    partial void OnDeviceDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDeviceNoChanging(int value);
    partial void OnDeviceNoChanged();
    partial void OnIpPortChanging(string value);
    partial void OnIpPortChanged();
    partial void OnCardUIDChanging(System.Nullable<System.Guid> value);
    partial void OnCardUIDChanged();
    partial void OnCardSeriesChanging(int value);
    partial void OnCardSeriesChanged();
    partial void OnCardNoChanging(int value);
    partial void OnCardNoChanged();
    #endregion
		
		public Journal()
		{
			this._Card = default(EntityRef<Card>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysemDate", DbType="DateTime NOT NULL")]
		public System.DateTime SysemDate
		{
			get
			{
				return this._SysemDate;
			}
			set
			{
				if ((this._SysemDate != value))
				{
					this.OnSysemDateChanging(value);
					this.SendPropertyChanging();
					this._SysemDate = value;
					this.SendPropertyChanged("SysemDate");
					this.OnSysemDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceDate", DbType="DateTime NOT NULL")]
		public System.DateTime DeviceDate
		{
			get
			{
				return this._DeviceDate;
			}
			set
			{
				if ((this._DeviceDate != value))
				{
					this.OnDeviceDateChanging(value);
					this.SendPropertyChanging();
					this._DeviceDate = value;
					this.SendPropertyChanged("DeviceDate");
					this.OnDeviceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceNo", DbType="Int NOT NULL")]
		public int DeviceNo
		{
			get
			{
				return this._DeviceNo;
			}
			set
			{
				if ((this._DeviceNo != value))
				{
					this.OnDeviceNoChanging(value);
					this.SendPropertyChanging();
					this._DeviceNo = value;
					this.SendPropertyChanged("DeviceNo");
					this.OnDeviceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpPort", DbType="NVarChar(50)")]
		public string IpPort
		{
			get
			{
				return this._IpPort;
			}
			set
			{
				if ((this._IpPort != value))
				{
					this.OnIpPortChanging(value);
					this.SendPropertyChanging();
					this._IpPort = value;
					this.SendPropertyChanged("IpPort");
					this.OnIpPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CardUID
		{
			get
			{
				return this._CardUID;
			}
			set
			{
				if ((this._CardUID != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardUIDChanging(value);
					this.SendPropertyChanging();
					this._CardUID = value;
					this.SendPropertyChanged("CardUID");
					this.OnCardUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardSeries", DbType="Int NOT NULL")]
		public int CardSeries
		{
			get
			{
				return this._CardSeries;
			}
			set
			{
				if ((this._CardSeries != value))
				{
					this.OnCardSeriesChanging(value);
					this.SendPropertyChanging();
					this._CardSeries = value;
					this.SendPropertyChanged("CardSeries");
					this.OnCardSeriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNo", DbType="Int NOT NULL")]
		public int CardNo
		{
			get
			{
				return this._CardNo;
			}
			set
			{
				if ((this._CardNo != value))
				{
					this.OnCardNoChanging(value);
					this.SendPropertyChanging();
					this._CardNo = value;
					this.SendPropertyChanged("CardNo");
					this.OnCardNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_Journal", Storage="_Card", ThisKey="CardUID", OtherKey="UID", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.Journals.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.Journals.Add(this);
						this._CardUID = value.UID;
					}
					else
					{
						this._CardUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NamedInterval")]
	public partial class NamedInterval : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private string _Description;
		
		private int _SlideTime;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganizationUID;
		
		private EntitySet<Day> _Days;
		
		private EntitySet<Interval> _Intervals;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSlideTimeChanging(int value);
    partial void OnSlideTimeChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganizationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationUIDChanged();
    #endregion
		
		public NamedInterval()
		{
			this._Days = new EntitySet<Day>(new Action<Day>(this.attach_Days), new Action<Day>(this.detach_Days));
			this._Intervals = new EntitySet<Interval>(new Action<Interval>(this.attach_Intervals), new Action<Interval>(this.detach_Intervals));
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlideTime", DbType="Int NOT NULL")]
		public int SlideTime
		{
			get
			{
				return this._SlideTime;
			}
			set
			{
				if ((this._SlideTime != value))
				{
					this.OnSlideTimeChanging(value);
					this.SendPropertyChanging();
					this._SlideTime = value;
					this.SendPropertyChanged("SlideTime");
					this.OnSlideTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedInterval_Day", Storage="_Days", ThisKey="UID", OtherKey="NamedIntervalUID")]
		public EntitySet<Day> Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				this._Days.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NamedInterval_Interval", Storage="_Intervals", ThisKey="UID", OtherKey="NamedIntervalUID")]
		public EntitySet<Interval> Intervals
		{
			get
			{
				return this._Intervals;
			}
			set
			{
				this._Intervals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_NamedInterval", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.NamedIntervals.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.NamedIntervals.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Days(Day entity)
		{
			this.SendPropertyChanging();
			entity.NamedInterval = this;
		}
		
		private void detach_Days(Day entity)
		{
			this.SendPropertyChanging();
			entity.NamedInterval = null;
		}
		
		private void attach_Intervals(Interval entity)
		{
			this.SendPropertyChanging();
			entity.NamedInterval = this;
		}
		
		private void detach_Intervals(Interval entity)
		{
			this.SendPropertyChanging();
			entity.NamedInterval = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _PhotoUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private EntitySet<AccessTemplate> _AccessTemplates;
		
		private EntitySet<AdditionalColumnType> _AdditionalColumnTypes;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Document> _Documents;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<EmployeeReplacement> _EmployeeReplacements;
		
		private EntitySet<Holiday> _Holidays;
		
		private EntitySet<NamedInterval> _NamedIntervals;
		
		private EntitySet<OrganizationZone> _OrganizationZones;
		
		private EntitySet<Phone> _Phones;
		
		private EntitySet<Position> _Positions;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntitySet<ScheduleScheme> _ScheduleSchemes;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPhotoUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhotoUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    #endregion
		
		public Organization()
		{
			this._AccessTemplates = new EntitySet<AccessTemplate>(new Action<AccessTemplate>(this.attach_AccessTemplates), new Action<AccessTemplate>(this.detach_AccessTemplates));
			this._AdditionalColumnTypes = new EntitySet<AdditionalColumnType>(new Action<AdditionalColumnType>(this.attach_AdditionalColumnTypes), new Action<AdditionalColumnType>(this.detach_AdditionalColumnTypes));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Documents = new EntitySet<Document>(new Action<Document>(this.attach_Documents), new Action<Document>(this.detach_Documents));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._EmployeeReplacements = new EntitySet<EmployeeReplacement>(new Action<EmployeeReplacement>(this.attach_EmployeeReplacements), new Action<EmployeeReplacement>(this.detach_EmployeeReplacements));
			this._Holidays = new EntitySet<Holiday>(new Action<Holiday>(this.attach_Holidays), new Action<Holiday>(this.detach_Holidays));
			this._NamedIntervals = new EntitySet<NamedInterval>(new Action<NamedInterval>(this.attach_NamedIntervals), new Action<NamedInterval>(this.detach_NamedIntervals));
			this._OrganizationZones = new EntitySet<OrganizationZone>(new Action<OrganizationZone>(this.attach_OrganizationZones), new Action<OrganizationZone>(this.detach_OrganizationZones));
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			this._Positions = new EntitySet<Position>(new Action<Position>(this.attach_Positions), new Action<Position>(this.detach_Positions));
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._ScheduleSchemes = new EntitySet<ScheduleScheme>(new Action<ScheduleScheme>(this.attach_ScheduleSchemes), new Action<ScheduleScheme>(this.detach_ScheduleSchemes));
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhotoUID
		{
			get
			{
				return this._PhotoUID;
			}
			set
			{
				if ((this._PhotoUID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoUIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoUID = value;
					this.SendPropertyChanged("PhotoUID");
					this.OnPhotoUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_AccessTemplate", Storage="_AccessTemplates", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<AccessTemplate> AccessTemplates
		{
			get
			{
				return this._AccessTemplates;
			}
			set
			{
				this._AccessTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_AdditionalColumnType", Storage="_AdditionalColumnTypes", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<AdditionalColumnType> AdditionalColumnTypes
		{
			get
			{
				return this._AdditionalColumnTypes;
			}
			set
			{
				this._AdditionalColumnTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Department", Storage="_Departments", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Document", Storage="_Documents", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<Document> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Employee", Storage="_Employees", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_EmployeeReplacement", Storage="_EmployeeReplacements", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<EmployeeReplacement> EmployeeReplacements
		{
			get
			{
				return this._EmployeeReplacements;
			}
			set
			{
				this._EmployeeReplacements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Holiday", Storage="_Holidays", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<Holiday> Holidays
		{
			get
			{
				return this._Holidays;
			}
			set
			{
				this._Holidays.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_NamedInterval", Storage="_NamedIntervals", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<NamedInterval> NamedIntervals
		{
			get
			{
				return this._NamedIntervals;
			}
			set
			{
				this._NamedIntervals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationZone", Storage="_OrganizationZones", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<OrganizationZone> OrganizationZones
		{
			get
			{
				return this._OrganizationZones;
			}
			set
			{
				this._OrganizationZones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Phone", Storage="_Phones", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Position", Storage="_Positions", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<Position> Positions
		{
			get
			{
				return this._Positions;
			}
			set
			{
				this._Positions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Schedule", Storage="_Schedules", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_ScheduleScheme", Storage="_ScheduleSchemes", ThisKey="UID", OtherKey="OrganizationUID")]
		public EntitySet<ScheduleScheme> ScheduleSchemes
		{
			get
			{
				return this._ScheduleSchemes;
			}
			set
			{
				this._ScheduleSchemes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Organization", Storage="_Photo", ThisKey="PhotoUID", OtherKey="UID", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Organizations.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Organizations.Add(this);
						this._PhotoUID = value.UID;
					}
					else
					{
						this._PhotoUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessTemplates(AccessTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_AccessTemplates(AccessTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_AdditionalColumnTypes(AdditionalColumnType entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_AdditionalColumnTypes(AdditionalColumnType entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Documents(Document entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_EmployeeReplacements(EmployeeReplacement entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_EmployeeReplacements(EmployeeReplacement entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_Holidays(Holiday entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Holidays(Holiday entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_NamedIntervals(NamedInterval entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_NamedIntervals(NamedInterval entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_OrganizationZones(OrganizationZone entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrganizationZones(OrganizationZone entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
		
		private void attach_ScheduleSchemes(ScheduleScheme entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_ScheduleSchemes(ScheduleScheme entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrganizationZone")]
	public partial class OrganizationZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Guid _ZoneUID;
		
		private System.Guid _OrganizationUID;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnZoneUIDChanging(System.Guid value);
    partial void OnZoneUIDChanged();
    partial void OnOrganizationUIDChanging(System.Guid value);
    partial void OnOrganizationUIDChanged();
    #endregion
		
		public OrganizationZone()
		{
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ZoneUID
		{
			get
			{
				return this._ZoneUID;
			}
			set
			{
				if ((this._ZoneUID != value))
				{
					this.OnZoneUIDChanging(value);
					this.SendPropertyChanging();
					this._ZoneUID = value;
					this.SendPropertyChanged("ZoneUID");
					this.OnZoneUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrganizationZone", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrganizationZones.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrganizationZones.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(System.Guid);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PassJournal")]
	public partial class PassJournal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.Guid _EmployeeUID;
		
		private System.Nullable<System.Guid> _ZoneUID;
		
		private System.Nullable<System.DateTime> _EntryTime;
		
		private System.Nullable<System.DateTime> _ExitTime;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnEmployeeUIDChanging(System.Guid value);
    partial void OnEmployeeUIDChanged();
    partial void OnZoneUIDChanging(System.Nullable<System.Guid> value);
    partial void OnZoneUIDChanged();
    partial void OnEntryTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEntryTimeChanged();
    partial void OnExitTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnExitTimeChanged();
    #endregion
		
		public PassJournal()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EmployeeUID
		{
			get
			{
				return this._EmployeeUID;
			}
			set
			{
				if ((this._EmployeeUID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeUIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeUID = value;
					this.SendPropertyChanged("EmployeeUID");
					this.OnEmployeeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ZoneUID
		{
			get
			{
				return this._ZoneUID;
			}
			set
			{
				if ((this._ZoneUID != value))
				{
					this.OnZoneUIDChanging(value);
					this.SendPropertyChanging();
					this._ZoneUID = value;
					this.SendPropertyChanged("ZoneUID");
					this.OnZoneUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EntryTime
		{
			get
			{
				return this._EntryTime;
			}
			set
			{
				if ((this._EntryTime != value))
				{
					this.OnEntryTimeChanging(value);
					this.SendPropertyChanging();
					this._EntryTime = value;
					this.SendPropertyChanged("EntryTime");
					this.OnEntryTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExitTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExitTime
		{
			get
			{
				return this._ExitTime;
			}
			set
			{
				if ((this._ExitTime != value))
				{
					this.OnExitTimeChanging(value);
					this.SendPropertyChanging();
					this._ExitTime = value;
					this.SendPropertyChanged("ExitTime");
					this.OnExitTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PassJournal", Storage="_Employee", ThisKey="EmployeeUID", OtherKey="UID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.PassJournals.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.PassJournals.Add(this);
						this._EmployeeUID = value.UID;
					}
					else
					{
						this._EmployeeUID = default(System.Guid);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phone")]
	public partial class Phone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private string _NumberString;
		
		private System.Nullable<System.Guid> _DepartmentUID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganizationUID;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumberStringChanging(string value);
    partial void OnNumberStringChanged();
    partial void OnDepartmentUIDChanging(System.Nullable<System.Guid> value);
    partial void OnDepartmentUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganizationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationUIDChanged();
    #endregion
		
		public Phone()
		{
			this._Department = default(EntityRef<Department>);
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberString", DbType="NVarChar(50)")]
		public string NumberString
		{
			get
			{
				return this._NumberString;
			}
			set
			{
				if ((this._NumberString != value))
				{
					this.OnNumberStringChanging(value);
					this.SendPropertyChanging();
					this._NumberString = value;
					this.SendPropertyChanged("NumberString");
					this.OnNumberStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DepartmentUID
		{
			get
			{
				return this._DepartmentUID;
			}
			set
			{
				if ((this._DepartmentUID != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentUIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentUID = value;
					this.SendPropertyChanged("DepartmentUID");
					this.OnDepartmentUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Phone", Storage="_Department", ThisKey="DepartmentUID", OtherKey="UID", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._DepartmentUID = value.UID;
					}
					else
					{
						this._DepartmentUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Phone", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Photo")]
	public partial class Photo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Data.Linq.Binary _Data;
		
		private EntitySet<AdditionalColumn> _AdditionalColumns;
		
		private EntitySet<Department> _Departments;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Organization> _Organizations;
		
		private EntitySet<Position> _Positions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public Photo()
		{
			this._AdditionalColumns = new EntitySet<AdditionalColumn>(new Action<AdditionalColumn>(this.attach_AdditionalColumns), new Action<AdditionalColumn>(this.detach_AdditionalColumns));
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Organizations = new EntitySet<Organization>(new Action<Organization>(this.attach_Organizations), new Action<Organization>(this.detach_Organizations));
			this._Positions = new EntitySet<Position>(new Action<Position>(this.attach_Positions), new Action<Position>(this.detach_Positions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_AdditionalColumn", Storage="_AdditionalColumns", ThisKey="UID", OtherKey="PhotoUID")]
		public EntitySet<AdditionalColumn> AdditionalColumns
		{
			get
			{
				return this._AdditionalColumns;
			}
			set
			{
				this._AdditionalColumns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Department", Storage="_Departments", ThisKey="UID", OtherKey="PhotoUID")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Employee", Storage="_Employees", ThisKey="UID", OtherKey="PhotoUID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Organization", Storage="_Organizations", ThisKey="UID", OtherKey="PhotoUID")]
		public EntitySet<Organization> Organizations
		{
			get
			{
				return this._Organizations;
			}
			set
			{
				this._Organizations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Position", Storage="_Positions", ThisKey="UID", OtherKey="PhotoUID")]
		public EntitySet<Position> Positions
		{
			get
			{
				return this._Positions;
			}
			set
			{
				this._Positions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdditionalColumns(AdditionalColumn entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_AdditionalColumns(AdditionalColumn entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
		
		private void attach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Photo = this;
		}
		
		private void detach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.Photo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganizationUID;
		
		private System.Nullable<System.Guid> _PhotoUID;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<Photo> _Photo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganizationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationUIDChanged();
    partial void OnPhotoUIDChanging(System.Nullable<System.Guid> value);
    partial void OnPhotoUIDChanged();
    #endregion
		
		public Position()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Organization = default(EntityRef<Organization>);
			this._Photo = default(EntityRef<Photo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhotoUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PhotoUID
		{
			get
			{
				return this._PhotoUID;
			}
			set
			{
				if ((this._PhotoUID != value))
				{
					if (this._Photo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhotoUIDChanging(value);
					this.SendPropertyChanging();
					this._PhotoUID = value;
					this.SendPropertyChanged("PhotoUID");
					this.OnPhotoUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Employee", Storage="_Employees", ThisKey="UID", OtherKey="PositionUID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Position", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Positions.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Positions.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Photo_Position", Storage="_Photo", ThisKey="PhotoUID", OtherKey="UID", IsForeignKey=true)]
		public Photo Photo
		{
			get
			{
				return this._Photo.Entity;
			}
			set
			{
				Photo previousValue = this._Photo.Entity;
				if (((previousValue != value) 
							|| (this._Photo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Photo.Entity = null;
						previousValue.Positions.Remove(this);
					}
					this._Photo.Entity = value;
					if ((value != null))
					{
						value.Positions.Add(this);
						this._PhotoUID = value.UID;
					}
					else
					{
						this._PhotoUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Photo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schedule")]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _ScheduleSchemeUID;
		
		private bool _IsIgnoreHoliday;
		
		private bool _IsOnlyFirstEnter;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganizationUID;
		
		private EntitySet<ScheduleZoneLink> _ScheduleZoneLinks;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<EmployeeReplacement> _EmployeeReplacements;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<ScheduleScheme> _ScheduleScheme;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnScheduleSchemeUIDChanging(System.Nullable<System.Guid> value);
    partial void OnScheduleSchemeUIDChanged();
    partial void OnIsIgnoreHolidayChanging(bool value);
    partial void OnIsIgnoreHolidayChanged();
    partial void OnIsOnlyFirstEnterChanging(bool value);
    partial void OnIsOnlyFirstEnterChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganizationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationUIDChanged();
    #endregion
		
		public Schedule()
		{
			this._ScheduleZoneLinks = new EntitySet<ScheduleZoneLink>(new Action<ScheduleZoneLink>(this.attach_ScheduleZoneLinks), new Action<ScheduleZoneLink>(this.detach_ScheduleZoneLinks));
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._EmployeeReplacements = new EntitySet<EmployeeReplacement>(new Action<EmployeeReplacement>(this.attach_EmployeeReplacements), new Action<EmployeeReplacement>(this.detach_EmployeeReplacements));
			this._Organization = default(EntityRef<Organization>);
			this._ScheduleScheme = default(EntityRef<ScheduleScheme>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduleSchemeUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ScheduleSchemeUID
		{
			get
			{
				return this._ScheduleSchemeUID;
			}
			set
			{
				if ((this._ScheduleSchemeUID != value))
				{
					if (this._ScheduleScheme.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScheduleSchemeUIDChanging(value);
					this.SendPropertyChanging();
					this._ScheduleSchemeUID = value;
					this.SendPropertyChanged("ScheduleSchemeUID");
					this.OnScheduleSchemeUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIgnoreHoliday", DbType="Bit NOT NULL")]
		public bool IsIgnoreHoliday
		{
			get
			{
				return this._IsIgnoreHoliday;
			}
			set
			{
				if ((this._IsIgnoreHoliday != value))
				{
					this.OnIsIgnoreHolidayChanging(value);
					this.SendPropertyChanging();
					this._IsIgnoreHoliday = value;
					this.SendPropertyChanged("IsIgnoreHoliday");
					this.OnIsIgnoreHolidayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOnlyFirstEnter", DbType="Bit NOT NULL")]
		public bool IsOnlyFirstEnter
		{
			get
			{
				return this._IsOnlyFirstEnter;
			}
			set
			{
				if ((this._IsOnlyFirstEnter != value))
				{
					this.OnIsOnlyFirstEnterChanging(value);
					this.SendPropertyChanging();
					this._IsOnlyFirstEnter = value;
					this.SendPropertyChanged("IsOnlyFirstEnter");
					this.OnIsOnlyFirstEnterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_ScheduleZoneLink", Storage="_ScheduleZoneLinks", ThisKey="UID", OtherKey="ScheduleUID")]
		public EntitySet<ScheduleZoneLink> ScheduleZoneLinks
		{
			get
			{
				return this._ScheduleZoneLinks;
			}
			set
			{
				this._ScheduleZoneLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_Employee", Storage="_Employees", ThisKey="UID", OtherKey="ScheduleUID")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Schedule_EmployeeReplacement", Storage="_EmployeeReplacements", ThisKey="UID", OtherKey="ScheduleUID")]
		public EntitySet<EmployeeReplacement> EmployeeReplacements
		{
			get
			{
				return this._EmployeeReplacements;
			}
			set
			{
				this._EmployeeReplacements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Schedule", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleScheme_Schedule", Storage="_ScheduleScheme", ThisKey="ScheduleSchemeUID", OtherKey="UID", IsForeignKey=true)]
		public ScheduleScheme ScheduleScheme
		{
			get
			{
				return this._ScheduleScheme.Entity;
			}
			set
			{
				ScheduleScheme previousValue = this._ScheduleScheme.Entity;
				if (((previousValue != value) 
							|| (this._ScheduleScheme.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScheduleScheme.Entity = null;
						previousValue.Schedules.Remove(this);
					}
					this._ScheduleScheme.Entity = value;
					if ((value != null))
					{
						value.Schedules.Add(this);
						this._ScheduleSchemeUID = value.UID;
					}
					else
					{
						this._ScheduleSchemeUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ScheduleScheme");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScheduleZoneLinks(ScheduleZoneLink entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_ScheduleZoneLinks(ScheduleZoneLink entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
		
		private void attach_EmployeeReplacements(EmployeeReplacement entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = this;
		}
		
		private void detach_EmployeeReplacements(EmployeeReplacement entity)
		{
			this.SendPropertyChanging();
			entity.Schedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScheduleScheme")]
	public partial class ScheduleScheme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private string _Name;
		
		private System.Nullable<int> _Type;
		
		private string _Description;
		
		private bool _IsDeleted;
		
		private System.DateTime _RemovalDate;
		
		private System.Nullable<System.Guid> _OrganizationUID;
		
		private EntitySet<Day> _Days;
		
		private EntitySet<Schedule> _Schedules;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRemovalDateChanging(System.DateTime value);
    partial void OnRemovalDateChanged();
    partial void OnOrganizationUIDChanging(System.Nullable<System.Guid> value);
    partial void OnOrganizationUIDChanged();
    #endregion
		
		public ScheduleScheme()
		{
			this._Days = new EntitySet<Day>(new Action<Day>(this.attach_Days), new Action<Day>(this.detach_Days));
			this._Schedules = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedules), new Action<Schedule>(this.detach_Schedules));
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemovalDate", DbType="DateTime NOT NULL")]
		public System.DateTime RemovalDate
		{
			get
			{
				return this._RemovalDate;
			}
			set
			{
				if ((this._RemovalDate != value))
				{
					this.OnRemovalDateChanging(value);
					this.SendPropertyChanging();
					this._RemovalDate = value;
					this.SendPropertyChanged("RemovalDate");
					this.OnRemovalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OrganizationUID
		{
			get
			{
				return this._OrganizationUID;
			}
			set
			{
				if ((this._OrganizationUID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationUIDChanging(value);
					this.SendPropertyChanging();
					this._OrganizationUID = value;
					this.SendPropertyChanged("OrganizationUID");
					this.OnOrganizationUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleScheme_Day", Storage="_Days", ThisKey="UID", OtherKey="ScheduleSchemeUID")]
		public EntitySet<Day> Days
		{
			get
			{
				return this._Days;
			}
			set
			{
				this._Days.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScheduleScheme_Schedule", Storage="_Schedules", ThisKey="UID", OtherKey="ScheduleSchemeUID")]
		public EntitySet<Schedule> Schedules
		{
			get
			{
				return this._Schedules;
			}
			set
			{
				this._Schedules.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_ScheduleScheme", Storage="_Organization", ThisKey="OrganizationUID", OtherKey="UID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.ScheduleSchemes.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.ScheduleSchemes.Add(this);
						this._OrganizationUID = value.UID;
					}
					else
					{
						this._OrganizationUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Days(Day entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleScheme = this;
		}
		
		private void detach_Days(Day entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleScheme = null;
		}
		
		private void attach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleScheme = this;
		}
		
		private void detach_Schedules(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.ScheduleScheme = null;
		}
	}
}
#pragma warning restore 1591
