using System;
using System.Linq;
using Common;
using FiresecAPI;
using FiresecAPI.GK;
using FiresecClient;
using Infrastructure;
using Infrastructure.Common;
using Infrastructure.Common.Windows;
using Infrastructure.Common.Windows.ViewModels;
using Infrastructure.Events;
using FiresecAPI.Journal;

namespace GKModule.ViewModels
{
	public class JournalItemViewModel : BaseViewModel
	{
		public GKJournalItem JournalItem { get; private set; }
		public bool IsExistsInConfig { get; private set; }
		public string PresentationName { get; private set; }
		public string Name { get; private set; }
		public string Description { get; private set; }

		public GKDevice Device { get; private set; }
		public GKZone Zone { get; private set; }
		public GKDirection Direction { get; private set; }
		public GKPumpStation PumpStation { get; private set; }
		public GKMPT MPT { get; private set; }
		public GKDelay Delay { get; private set; }
		public GKPim Pim { get; private set; }
		public GKGuardZone GuardZone { get; private set; }

		public JournalItemViewModel(GKJournalItem journalItem)
		{
			ShowObjectOrPlanCommand = new RelayCommand(OnShowObjectOrPlan);
			ShowObjectCommand = new RelayCommand(OnShowObject, CanShowInTree);
			ShowOnPlanCommand = new RelayCommand(OnShowOnPlan, CanShowOnPlan);
			ShowPropertiesCommand = new RelayCommand(OnShowProperties, CanShowProperties);

			JournalItem = journalItem;

			if (journalItem.JournalEventNameType != JournalEventNameType.NULL)
			{
				Name = EventDescriptionAttributeHelper.ToName(journalItem.JournalEventNameType);
			}
			else
			{
				Name = journalItem.Name;
			}

			if (journalItem.JournalEventDescriptionType != JournalEventDescriptionType.NULL)
			{
				Description = EventDescriptionAttributeHelper.ToName(journalItem.JournalEventDescriptionType);
			}
			else
			{
				Description = journalItem.Description;

				if (!string.IsNullOrEmpty(JournalItem.AdditionalDescription))
					Description = JournalItem.Description + " " + JournalItem.AdditionalDescription;
				Description = JournalItem.Description;
			}

			try
			{
				switch (JournalItem.JournalObjectType)
				{
					case GKJournalObjectType.Device:
						Device = GKManager.Devices.FirstOrDefault(x => x.UID == JournalItem.ObjectUID);
						if (Device != null)
						{
							PresentationName = Device.PresentationName;
						}
						break;

					case GKJournalObjectType.Zone:
						Zone = GKManager.Zones.FirstOrDefault(x => x.UID == JournalItem.ObjectUID);
						if (Zone != null)
						{
							PresentationName = Zone.PresentationName;
						}
						break;

					case GKJournalObjectType.Direction:
						Direction = GKManager.Directions.FirstOrDefault(x => x.UID == JournalItem.ObjectUID);
						if (Direction != null)
						{
							PresentationName = Direction.PresentationName;
						}
						break;

					case GKJournalObjectType.PumpStation:
						PumpStation = GKManager.PumpStations.FirstOrDefault(x => x.UID == JournalItem.ObjectUID);
						if (PumpStation != null)
						{
							PresentationName = PumpStation.PresentationName;
						}
						break;

					case GKJournalObjectType.MPT:
						MPT = GKManager.MPTs.FirstOrDefault(x => x.UID == JournalItem.ObjectUID);
						if (MPT != null)
						{
							PresentationName = MPT.PresentationName;
						}
						break;

					case GKJournalObjectType.Delay:
						Delay = GKManager.Delays.FirstOrDefault(x => x.UID == JournalItem.ObjectUID);
						if (Delay != null)
						{
							PresentationName = Delay.PresentationName;
						}
						else
						{
							Delay = GKManager.AutoGeneratedDelays.FirstOrDefault(x => x.UID == JournalItem.ObjectUID);
							if (Delay != null)
							{
								PresentationName = Delay.PresentationName;
								if (Delay.PumpStationUID != Guid.Empty)
								{
									PumpStation = GKManager.PumpStations.FirstOrDefault(x => x.UID == Delay.PumpStationUID);
									if (PumpStation != null)
									{
										PresentationName += " (" + PumpStation.PresentationName + ")";
										break;
									}
								}
							}
						}
						break;

					case GKJournalObjectType.Pim:
						Pim = GKManager.AutoGeneratedPims.FirstOrDefault(x => x.UID == JournalItem.ObjectUID);
						if (Pim != null)
						{
							PresentationName = Pim.PresentationName;
							if (Pim.PumpStationUID != Guid.Empty)
							{
								PumpStation = GKManager.PumpStations.FirstOrDefault(x => x.UID == Pim.PumpStationUID);
								if (PumpStation != null)
								{
									PresentationName += " (" + PumpStation.PresentationName + ")";
									break;
								}
							}
							if (Pim.MPTUID != Guid.Empty)
							{
								MPT = GKManager.MPTs.FirstOrDefault(x => x.UID == Pim.MPTUID);
								if (MPT != null)
								{
									PresentationName += " (" + MPT.PresentationName + ")";
									break;
								}
							}
						}
						break;

					case GKJournalObjectType.GuardZone:
						GuardZone = GKManager.GuardZones.FirstOrDefault(x => x.UID == JournalItem.ObjectUID);
						if (GuardZone != null)
						{
							PresentationName = GuardZone.PresentationName;
						}
						break;

					case GKJournalObjectType.GkUser:
						PresentationName = JournalItem.UserName;
						break;

					case GKJournalObjectType.GK:
					case GKJournalObjectType.System:
						PresentationName = "";
						break;
				}

				IsExistsInConfig = true;
				if (PresentationName == null)
				{
					PresentationName = JournalItem.ObjectName;
					IsExistsInConfig = false;
				}

				if (PresentationName == null)
					PresentationName = "<Нет в конфигурации>";
			}
			catch (Exception e)
			{
				Logger.Error(e, "JournalItemViewModel ctr");
			}
		}

		public string ControllerName
		{
			get
			{
				if (JournalItem.ControllerAddress == 0)
					return "Неизвестно";
				if (JournalItem.ControllerAddress == 512)
					return "ГК";
				return "КАУ " + JournalItem.ControllerAddress;
			}
		}

		public bool CanShow
		{
			get { return CanShowInTree() || CanShowOnPlan(); }
		}

		public RelayCommand ShowObjectOrPlanCommand { get; private set; }
		void OnShowObjectOrPlan()
		{
			if (CanShowOnPlan())
				OnShowOnPlan();
			else if (CanShowInTree())
				OnShowObject();
		}

		public RelayCommand ShowPropertiesCommand { get; private set; }
		void OnShowProperties()
		{
			switch (JournalItem.JournalObjectType)
			{
				case GKJournalObjectType.Device:
					DialogService.ShowWindow(new DeviceDetailsViewModel(Device));
					break;

				case GKJournalObjectType.Zone:
					DialogService.ShowWindow(new ZoneDetailsViewModel(Zone));
					break;

				case GKJournalObjectType.Direction:
					DialogService.ShowWindow(new DirectionDetailsViewModel(Direction));
					break;

				case GKJournalObjectType.PumpStation:
					DialogService.ShowWindow(new PumpStationDetailsViewModel(PumpStation));
					break;

				case GKJournalObjectType.MPT:
					DialogService.ShowWindow(new MPTDetailsViewModel(MPT));
					break;

				case GKJournalObjectType.Delay:
					if (!Delay.IsAutoGenerated)
					{
						DialogService.ShowWindow(new DelayDetailsViewModel(Delay));
					}
					else
					{
						if (PumpStation != null)
						{
							DialogService.ShowWindow(new PumpStationDetailsViewModel(PumpStation));
							break;
						}
					}
					break;

				case GKJournalObjectType.Pim:
					if (!Pim.IsAutoGenerated)
					{
						DialogService.ShowWindow(new PimDetailsViewModel(Pim));
					}
					else
					{
						if (PumpStation != null)
						{
							DialogService.ShowWindow(new PumpStationDetailsViewModel(PumpStation));
							break;
						}
						if (MPT != null)
						{
							DialogService.ShowWindow(new MPTDetailsViewModel(MPT));
							break;
						}
					}
					break;

				case GKJournalObjectType.GuardZone:
					DialogService.ShowWindow(new GuardZoneDetailsViewModel(GuardZone));
					break;
			}
		}
		bool CanShowProperties()
		{
			if (!IsExistsInConfig)
				return false;

			switch (JournalItem.JournalObjectType)
			{
				case GKJournalObjectType.Device:
				case GKJournalObjectType.Zone:
				case GKJournalObjectType.Direction:
				case GKJournalObjectType.PumpStation:
				case GKJournalObjectType.MPT:
				case GKJournalObjectType.Delay:
				case GKJournalObjectType.Pim:
				case GKJournalObjectType.GuardZone:
					return true;
			}
			return false;
		}

		public RelayCommand ShowObjectCommand { get; private set; }
		void OnShowObject()
		{
			switch (JournalItem.JournalObjectType)
			{
				case GKJournalObjectType.Device:
					ServiceFactory.Events.GetEvent<ShowXDeviceEvent>().Publish(JournalItem.ObjectUID);
					break;

				case GKJournalObjectType.Zone:
					ServiceFactory.Events.GetEvent<ShowXZoneEvent>().Publish(JournalItem.ObjectUID);
					break;

				case GKJournalObjectType.Direction:
					ServiceFactory.Events.GetEvent<ShowXDirectionEvent>().Publish(JournalItem.ObjectUID);
					break;

				case GKJournalObjectType.PumpStation:
					ServiceFactory.Events.GetEvent<ShowXPumpStationEvent>().Publish(JournalItem.ObjectUID);
					break;

				case GKJournalObjectType.MPT:
					ServiceFactory.Events.GetEvent<ShowXMPTEvent>().Publish(JournalItem.ObjectUID);
					break;

				case GKJournalObjectType.Delay:
					if (!Delay.IsAutoGenerated)
					{
						ServiceFactory.Events.GetEvent<ShowXDelayEvent>().Publish(JournalItem.ObjectUID);
					}
					else
					{
						if (PumpStation != null)
						{
							ServiceFactory.Events.GetEvent<ShowXPumpStationEvent>().Publish(PumpStation.UID);
							break;
						}
					}
					break;

				case GKJournalObjectType.Pim:
					if (!Pim.IsAutoGenerated)
					{
						ServiceFactory.Events.GetEvent<ShowXPimEvent>().Publish(JournalItem.ObjectUID);
					}
					else
					{
						if (PumpStation != null)
						{
							ServiceFactory.Events.GetEvent<ShowXPumpStationEvent>().Publish(PumpStation.UID);
							break;
						}
						if (MPT != null)
						{
							ServiceFactory.Events.GetEvent<ShowXMPTEvent>().Publish(MPT.UID);
							break;
						}
					}
					break;

				case GKJournalObjectType.GuardZone:
					ServiceFactory.Events.GetEvent<ShowXGuardZoneEvent>().Publish(JournalItem.ObjectUID);
					break;
			}
		}

		bool CanShowInTree()
		{
			if (!IsExistsInConfig)
				return false;

			switch (JournalItem.JournalObjectType)
			{
				case GKJournalObjectType.Device:
				case GKJournalObjectType.Zone:
				case GKJournalObjectType.Direction:
				case GKJournalObjectType.PumpStation:
				case GKJournalObjectType.MPT:
				case GKJournalObjectType.Delay:
				case GKJournalObjectType.Pim:
				case GKJournalObjectType.GuardZone:
				case GKJournalObjectType.GK:
					return true;
			}
			return false;
		}

		public RelayCommand ShowOnPlanCommand { get; private set; }
		void OnShowOnPlan()
		{
			switch (JournalItem.JournalObjectType)
			{
				case GKJournalObjectType.Device:
					if (Device != null)
					{
						ShowOnPlanHelper.ShowDevice(Device);
					}
					break;
				case GKJournalObjectType.Zone:
					if (Zone != null)
					{
						ShowOnPlanHelper.ShowZone(Zone);
					}
					break;
				case GKJournalObjectType.Direction:
					if (Direction != null)
					{
						ShowOnPlanHelper.ShowDirection(Direction);
					}
					break;
				case GKJournalObjectType.GuardZone:
					if (GuardZone != null)
					{
						ShowOnPlanHelper.ShowGuardZone(GuardZone);
					}
					break;
			}
		}
		bool CanShowOnPlan()
		{
			if (!IsExistsInConfig)
				return false;

			switch (JournalItem.JournalObjectType)
			{
				case GKJournalObjectType.Device:
					if (Device != null)
					{
						return ShowOnPlanHelper.CanShowDevice(Device);
					}
					break;
				case GKJournalObjectType.Zone:
					if (Zone != null)
					{
						return ShowOnPlanHelper.CanShowZone(Zone);
					}
					break;
				case GKJournalObjectType.Direction:
					if (Direction != null)
					{
						return ShowOnPlanHelper.CanShowDirection(Direction);
					}
					break;
				case GKJournalObjectType.GuardZone:
					if (GuardZone != null)
					{
						return ShowOnPlanHelper.CanShowGuardZone(GuardZone);
					}
					break;
			}
			return false;
		}

		public bool ShowAdditionalProperties
		{
			get
			{
#if DEBUG
				return true;
#endif
				return false;
			}
		}
	}
}